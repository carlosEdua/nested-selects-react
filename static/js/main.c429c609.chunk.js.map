{"version":3,"sources":["../../src/nestedSelectsReact/createStructure.js","../../src/nestedSelectsReact/functionalComponents.jsx","../../src/utils/cycle.js","../../src/utils/parseChildren.js","../../src/utils/storeDataControl.js","../../src/nestedSelectsReact/nestedSelectsReact.jsx","../../src/components/select.jsx","../../src/components/option.jsx","../../src/components/makeVisible.jsx","examplesCode/stylesUse/cssTextCode.js","components/commons/Loader/loader.jsx","examplesCode/componentsUse/ShowFlags/components/flag.jsx","examplesCode/componentsUse/ShowFlags/containers/showFlag.jsx","examplesCode/componentsUse/PhoneCountry/phoneCountry.jsx","examplesCode/introduction/intro-structure.js","examplesCode/introduction/intro-form.jsx","components/commons/Portal/portal.jsx","components/commons/ClipBoard/clipBoard.jsx","components/commons/ExampleCode/exampleCode.jsx","examplesCode/introduction/intro.jsx","examplesCode/getStarted/example.jsx","examplesCode/exampleInText/allExamplesInText.js","examplesCode/getStarted/index.jsx","examplesCode/makingStructure/shortExamples.jsx","components/commons/GoToStylePage/goToStylePage.jsx","examplesCode/makingStructure/index.jsx","examplesCode/componentsUse/examples.jsx","examplesCode/componentsUse/index.jsx","examplesCode/customOnChange/example.jsx","examplesCode/customOnChange/index.jsx","examplesCode/stylesUse/examplesStyles.jsx","examplesCode/stylesUse/index.jsx","components/HamburguerMenu/hamburguer.jsx","components/Menu/menu.jsx","app/app.jsx","url.js","index.js"],"names":["ElementsStructure","constructor","this","_makeSelect","id","customchange","placeholder","label","selectObject","elementType","options","_verifyKeysAndValues","Error","_makeOption","makeVisible","option","_makeOptions","optionsArray","optArr","_makeReactComponentObj","component","addOptionsToSelect","fatherSelect","childsOptions","test","linkElementWithTriggerOption","element","triggerOption","link","allOptions","console","makeElement","elementCreated","text","savePrincipalSelects","_searchOptionAndSetMakeVisible","optionValue","elementsToAdd","objectType","objNode","value","MakeSelect","onChange","key","className","style","display","isSubSelect","index","makevisible","JSON","object","replacer","objects","derez","path","old_path","$ref","Array","nu","i","Object","name","retrocycle","$","px","eval","rez","item","seenObjects","obj","detect","keys","stack","stackSet","detected","oldindex","l1","l2","ParseChildren","nestedSelectReactchildren","findSubElementsInEachOption","reactOptionChildren","optionNode","children","makeVisibleChildren","struct","checkTypeOfChildrenComponents","reactElement","opts","elementNode","createElementNode","reactSelectOptions","optionChildren","optChildren","makeVisibleComponentChildren","j","props","Math","getParsedData","reactOptionsChildren","select","mapOriginalElementsToStoreData","originalSelectsArray","dataOfEachNode","findRecursively","node","String","nodeData","childrenNames","mapComponentInsertedWithCustomOnChangeToStoreData","selectName","componentName","selectStoreData","selectsData","updateChildrenNamesRecursively","names","deleteOldSelectStoreData","deleteRecursively","parseSelectsStoreData","cleanData","parse","jsonToParse","NestedSelectsReact","originalSelects","htmlToDraw","loading","ev","customOnChangeReferences","makeElementsVisible","newElementsToDraw","makeStructureNode","elementsStructure","elementsToInsert","fatherName","structureNode","linearHtmlArrNodes","elementName","principalElements","groups","father","insertElementsCustomOnChange","objectElements","elementsArrayObjects","parser","userAPI","objectElement","findComponentsInStructure","structure","objComponents","arrayOptions","loopOptionsAndMakevisibleArrays","findAllCustomChange","objReferences","htmlElement","componentsReferences","that","checker","set","storedata","Proxy","STOREDATA","cloneElement","subElements","componentDidMount","render","principalSelects","organizarElementos","Select","Option","MakeVisible","module","exports","nativeClasses","specificElements","Loader","SelectFlag","country","flagURL","onChangeHandler","src","alt","width","ShowCountry","Component","state","error","target","getCountryData","countryName","setState","fetch","response","json","data","flag","message","PhoneCountry","useState","phoneNumber","setPhoneNumber","international","defaultCountry","insertElement","screenWidth","document","body","offsetWidth","alert","IntroForm","nestedSelectsValues","handleInputChange","onSubmit","type","selects","mySelectsStructure","getvalues","cols","rows","onClick","allData","clear","log","PortalModal","showPortal","createPortal","getElementById","ClibBoard","showModal","setShowModal","closeClipboardMessage","setTimeout","copyToClipboard","codeTxt","navigator","clipboard","writeText","require","ExampleCode","codeText","lang","useEffect","Prism","highlightAll","Introduction","to","MyForm","preventDefault","makingStructureExampleCode","subComponentsExampleCode","GetStarted","MySubSelects","GoToStylesPages","MakingStructure","NestedSelects","fullExample","ThreeNestedSelects","values","SubComponents","SubComponentsPage","textDecoration","CustomChangeValue","MiniList","map","CustomChangeInsert","handleChangeInsert","a","MiniListImproved","setLoading","users","setUsers","getUsers","usersArr","CustomChangeInsertImproved","customChangeValue","handlerChangeInsert","customChangeInsert","fullyIndependentAsyncComponent","CustomOnChange","StyleExample","StylesPage","backgroundColor","Hamburger","handleOpenClose","isOpen","Menu","openState","marginLeft","href","data-icon","data-size","data-show-count","aria-label","exact","activeClassName","App","basename","Styles"],"mappings":"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","file":"static/js/main.c429c609.chunk.js","sourcesContent":["// *****************************************************************\r\n// *****************************************************************\r\n// metodos para definir y agregar los elementos mas facilmente\r\n// API para agregar datos facilmente\r\nclass ElementsStructure{\r\n    constructor(){\r\n        this.elementsStructure = [];\r\n        // guardar como {llave: valor} todas las opciones existentes\r\n        // para poder acceder a ellas rapidamente en caso de querer darle un valor a su propiedad makeVisble\r\n        // recordar que un objeto option se vería asi\r\n        /**\r\n         * { <<optionValue>>: {value, text, elementType ,makeVisible} }\r\n         */\r\n        this.allOptions = {};\r\n    }\r\n\r\n\r\n\r\n\r\n    // ========================== methods to make select, option and React components ==================\r\n\r\n    // make individual select object and return it\r\n    _makeSelect({\r\n        name,\r\n        id = null,\r\n        customchange = null,\r\n        placeholder = 'please select an option',\r\n        label = null\r\n    }){\r\n        // make select object\r\n        let selectObject = {\r\n            name, // mandatory / obligatorio\r\n            id,\r\n            customchange,\r\n            placeholder,\r\n            label,\r\n            elementType: 'select',\r\n            options: []\r\n        }\r\n        // verify the object keys and values\r\n        let isGood = this._verifyKeysAndValues('selectObject', selectObject);\r\n        if(isGood){\r\n            return selectObject;\r\n        }\r\n        // mandatory {name: value} is not valid\r\n        else{\r\n            throw new Error('the \\'name\\' property is mandatory. You can also use the \\'id\\' property. Error with the (<Select>|selectObject)');\r\n        }\r\n    \r\n    }\r\n\r\n\r\n    // make just one option object and return it\r\n    _makeOption({ value, text, makeVisible = [] }){\r\n        const option = {\r\n            value,\r\n            text,\r\n            makeVisible,\r\n            elementType: 'option', // add elementType key\r\n        }\r\n        // save in global options\r\n        this.allOptions[value] = option; \r\n        \r\n        return option;\r\n\r\n    }\r\n\r\n\r\n    // make options\r\n    // return an array of options objects\r\n    _makeOptions(optionsArray){\r\n        let optArr = []\r\n        // make each option\r\n        for(let option of optionsArray){\r\n            optArr.push(\r\n                this._makeOption(option) // returns a option object\r\n            )\r\n        }\r\n\r\n        // verify mandatory { value, text } for every optionObject in optionsArray \r\n        let allGood = this._verifyKeysAndValues('optionsArray', optArr);\r\n        if(allGood){ return optArr; }\r\n        // mandatory { value, text } is not valid\r\n        else{\r\n            throw new Error('the \\'value\\' and \\'text\\' propertys are mandatory for every optionObject in the array. Error with the optionObject');\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    // make a object with a react component inside\r\n    _makeReactComponentObj({ name, component}){\r\n        return {\r\n            elementType: 'component',\r\n            name,\r\n            component\r\n        }\r\n    }\r\n\r\n\r\n    // ================= methods to build the principal structure ====================\r\n\r\n    // add options array to select object \r\n    // addSubElements(elementsToAdd, fatherElement , optionValue = '' ){\r\n    addOptionsToSelect(fatherSelect, childsOptions){\r\n        let elementType;\r\n        /* ver si existe un elemento padre, en caso de no existir es porque se quiere añadir\r\n           un makeVisible[] a una option{} en especifico. Si si existe fatherSelect es porque se \r\n           quiere añadir las option{} a un select{}  \r\n        */ \r\n        if(fatherSelect) elementType = fatherSelect.elementType;\r\n        // si es un select, agregar las options[] a ese select\r\n        if( /select/i.test(elementType) ){\r\n            fatherSelect.options = childsOptions;\r\n        }\r\n        else{\r\n            throw new Error(`Error adding subElements, check the parameters: \\n \r\n                 { \r\n                     fatherSelect : object,  \r\n                     childsOptions : object\r\n                 }`);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // \"enlazar\" un elemento hijo, ya sea otro <select> ó un <Component/>\r\n    // a su <option> 'disparadora', es decir, cuando se seleccione dicha <option>\r\n    // un elemento se va a renderizar.\r\n    linkElementWithTriggerOption(element, triggerOption){\r\n        \r\n        const link = option => {\r\n            // ver si es un array de objetos o un solo objeto\r\n            if(element instanceof Array) option.makeVisible = [...option.makeVisible, ...element];\r\n            else option.makeVisible = [...option.makeVisible, element ];\r\n        }\r\n\r\n        // si se le pasa el nombre de la trigger option\r\n        if(typeof triggerOption === 'string'){\r\n            let option = this.allOptions[triggerOption];\r\n            // si existe una opción con dicho value\r\n            if(option) link(option);\r\n            // no existe una opcion con ese value\r\n            else throw new Error(`there is no option with this value: ${triggerOption}`);\r\n        }\r\n        // si es un objeto <option>{}\r\n        else if(triggerOption.elementType === 'option'){\r\n            link(triggerOption);\r\n        }\r\n        // no pasó ni el value de la opción ni el objeto opción como tal\r\n        else{\r\n            console.error(`the triggerOption must be a string with the option value or an element option object, instead this was received:`, triggerOption);\r\n            throw new Error(`error in linkElementWithTriggerOption method`);\r\n        }\r\n    }\r\n\r\n\r\n    // *********************************************************************************\r\n    // *********************************************************************************\r\n    /**\r\n     * Make a element object like a select, option or a react component.\r\n     * @method\r\n     * @param {string} elementType - select | option | options | component.\r\n     * @param {object} object - a object with the values of component.\r\n     */\r\n    makeElement(elementType, { \r\n        name, // for all\r\n        id, // (optional) for all\r\n        placeholder = 'please select an option', // for <select>\r\n        optionsArray = [], // for <select>\r\n        customchange, // for <select>\r\n        label, // for <select>\r\n        value, // for <option>\r\n        text, // for <option>\r\n        component, // for <Component/>\r\n     }){\r\n\r\n        let elementCreated;\r\n        // make a select{} object\r\n        if(/select/i.test(elementType)){\r\n            elementCreated = this._makeSelect({ name, id, customchange, placeholder, label });\r\n        }\r\n        // make just one option{} object\r\n        else if(/option\\b/i.test(elementType)){\r\n            elementCreated = this._makeOption({ value, text });\r\n        }\r\n        // make multiple option{} objects\r\n        else if(/options/i.test(elementType)){\r\n            elementCreated = this._makeOptions(optionsArray);\r\n        }\r\n        // make component\r\n        else if(/component/i.test(elementType)){\r\n            elementCreated = this._makeReactComponentObj({ name, component});\r\n        }\r\n\r\n        return elementCreated;\r\n    }\r\n\r\n    // agregar a la estructura principal\r\n    // save and return principals elements\r\n    savePrincipalSelects(...principalSelectObjects){\r\n        this.elementsStructure = principalSelectObjects;\r\n        return this.elementsStructure;\r\n    }\r\n    \r\n\r\n\r\n    // buscar por medio de la propiedad value en todas las opciones globales\r\n    // y la option{} que tenga ese 'value' modificarle la propiedad 'makeVisible'\r\n    _searchOptionAndSetMakeVisible(optionValue, elementsToAdd){\r\n        if(this.allOptions[optionValue]){\r\n\r\n            // if elementsToAdd is just one object\r\n            if( !(elementsToAdd instanceof Array) ) elementsToAdd = [elementsToAdd];\r\n\r\n            this.allOptions[optionValue].makeVisible = elementsToAdd;\r\n        }\r\n        // no existe dicha option{} con tal 'value'\r\n        else{\r\n            throw new Error(`there is no option with this value: ${optionValue}`)\r\n        }\r\n    }\r\n\r\n    // verify mandatory keys and values for objects created\r\n    // so this verify for example if selectObject has a name,\r\n    // and every option in optionsArray has a truty { value, text }\r\n    _verifyKeysAndValues(objectType, objNode){\r\n        if(objectType === 'selectObject'){\r\n            // check name key \r\n            return objNode['name'] || objNode['id'] ? true : false;\r\n        }\r\n        else if(objectType === 'optionsArray'){\r\n            //  optionsArray\r\n            for(let optionObj of objNode){\r\n                let { value, text } = optionObj;\r\n                if( !(value && text  ) ) return false; // check truty values\r\n            }\r\n            return true; // all good\r\n        }\r\n        // sub element, like a <div> or a React Component\r\n        else{\r\n            // in development\r\n        }\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n// funcion para obtener el valor de los <select> dentro de <NestedSelects/>\r\n// esta función se usa dentro de \r\n\r\n\r\nexport default ElementsStructure;\r\n\r\n// export { \r\n//     ElementsStructure \r\n\r\n// };","import React from 'react';\r\n\r\n\r\n// make a <select>\r\n// to can save the childs component data, makeVisible atrtibute is used with JSON.stringify \r\nconst MakeSelect = ({select, isSubSelect, onChange}) => {\r\n    const { name, placeholder, options, label, id } = select;\r\n    \r\n    return(\r\n        <div key={name} className=\"nsr-select-container\">\r\n            {/* if label exist */}\r\n            { \r\n                label \r\n                && \r\n                <label className=\"nsr-label\" style={{display: 'block'}}>{label}</label>    \r\n            }\r\n\r\n            <select name={name} onChange={onChange} {...{id}} className={ isSubSelect ? 'nsr-sub-select': ''}>\r\n                {/* default option */}\r\n                <option value=\"\">{placeholder || 'please select an option'}</option>\r\n                {/* <select/> options */}\r\n                {\r\n                    options.map( (option, index) => {\r\n                        let { value, text, makeVisible } = option;\r\n                        \r\n                        return <option value={value} key={index} makevisible={JSON.stringify(makeVisible)}>{text}</option>\r\n                    })\r\n                }\r\n            </select>\r\n        </div> \r\n    )\r\n}\r\n\r\n\r\nexport {\r\n    MakeSelect\r\n}\r\n\r\n","/*\r\n    cycle.js\r\n    2018-05-15\r\n\r\n    Public Domain.\r\n\r\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\r\n\r\n    This code should be minified before deployment.\r\n    See http://javascript.crockford.com/jsmin.html\r\n\r\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\r\n    NOT CONTROL.\r\n*/\r\n\r\n// The file uses the WeakMap feature of ES6.\r\n\r\n/*jslint eval */\r\n\r\n/*property\r\n    $ref, decycle, forEach, get, indexOf, isArray, keys, length, push,\r\n    retrocycle, set, stringify, test\r\n*/\r\n\r\nif (typeof JSON.decycle !== \"function\") {\r\n    JSON.decycle = function decycle(object, replacer) {\r\n        \"use strict\";\r\n\r\n// Make a deep copy of an object or array, assuring that there is at most\r\n// one instance of each object or array in the resulting structure. The\r\n// duplicate references (which might be forming cycles) are replaced with\r\n// an object of the form\r\n\r\n//      {\"$ref\": PATH}\r\n\r\n// where the PATH is a JSONPath string that locates the first occurance.\r\n\r\n// So,\r\n\r\n//      var a = [];\r\n//      a[0] = a;\r\n//      return JSON.stringify(JSON.decycle(a));\r\n\r\n// produces the string '[{\"$ref\":\"$\"}]'.\r\n\r\n// If a replacer function is provided, then it will be called for each value.\r\n// A replacer function receives a value and returns a replacement value.\r\n\r\n// JSONPath is used to locate the unique object. $ indicates the top level of\r\n// the object or array. [NUMBER] or [STRING] indicates a child element or\r\n// property.\r\n\r\n        var objects = new WeakMap();     // object to path mappings\r\n\r\n        return (function derez(value, path) {\r\n\r\n// The derez function recurses through the object, producing the deep copy.\r\n\r\n            var old_path;   // The path of an earlier occurance of value\r\n            var nu;         // The new object or array\r\n\r\n// If a replacer function was provided, then call it to get a replacement value.\r\n\r\n            if (replacer !== undefined) {\r\n                value = replacer(value);\r\n            }\r\n\r\n// typeof null === \"object\", so go on if this value is really an object but not\r\n// one of the weird builtin objects.\r\n\r\n            if (\r\n                typeof value === \"object\"\r\n                && value !== null\r\n                && !(value instanceof Boolean)\r\n                && !(value instanceof Date)\r\n                && !(value instanceof Number)\r\n                && !(value instanceof RegExp)\r\n                && !(value instanceof String)\r\n            ) {\r\n\r\n// If the value is an object or array, look to see if we have already\r\n// encountered it. If so, return a {\"$ref\":PATH} object. This uses an\r\n// ES6 WeakMap.\r\n\r\n                old_path = objects.get(value);\r\n                if (old_path !== undefined) {\r\n                    return {$ref: old_path};\r\n                }\r\n\r\n// Otherwise, accumulate the unique value and its path.\r\n\r\n                objects.set(value, path);\r\n\r\n// If it is an array, replicate the array.\r\n\r\n                if (Array.isArray(value)) {\r\n                    nu = [];\r\n                    value.forEach(function (element, i) {\r\n                        nu[i] = derez(element, path + \"[\" + i + \"]\");\r\n                    });\r\n                } else {\r\n\r\n// If it is an object, replicate the object.\r\n\r\n                    nu = {};\r\n                    Object.keys(value).forEach(function (name) {\r\n                        nu[name] = derez(\r\n                            value[name],\r\n                            path + \"[\" + JSON.stringify(name) + \"]\"\r\n                        );\r\n                    });\r\n                }\r\n                return nu;\r\n            }\r\n            return value;\r\n        }(object, \"$\"));\r\n    };\r\n}\r\n\r\n\r\nif (typeof JSON.retrocycle !== \"function\") {\r\n    JSON.retrocycle = function retrocycle($) {\r\n        \"use strict\";\r\n\r\n// Restore an object that was reduced by decycle. Members whose values are\r\n// objects of the form\r\n//      {$ref: PATH}\r\n// are replaced with references to the value found by the PATH. This will\r\n// restore cycles. The object will be mutated.\r\n\r\n// The eval function is used to locate the values described by a PATH. The\r\n// root object is kept in a $ variable. A regular expression is used to\r\n// assure that the PATH is extremely well formed. The regexp contains nested\r\n// * quantifiers. That has been known to have extremely bad performance\r\n// problems on some browsers for very long strings. A PATH is expected to be\r\n// reasonably short. A PATH is allowed to belong to a very restricted subset of\r\n// Goessner's JSONPath.\r\n\r\n// So,\r\n//      var s = '[{\"$ref\":\"$\"}]';\r\n//      return JSON.retrocycle(JSON.parse(s));\r\n// produces an array containing a single element which is the array itself.\r\n\r\n        var px = /^\\$(?:\\[(?:\\d+|\"(?:[^\\\\\"\\u0000-\\u001f]|\\\\(?:[\\\\\"\\/bfnrt]|u[0-9a-zA-Z]{4}))*\")\\])*$/;\r\n\r\n        (function rez(value) {\r\n\r\n// The rez function walks recursively through the object looking for $ref\r\n// properties. When it finds one that has a value that is a path, then it\r\n// replaces the $ref object with a reference to the value that is found by\r\n// the path.\r\n\r\n            if (value && typeof value === \"object\") {\r\n                if (Array.isArray(value)) {\r\n                    value.forEach(function (element, i) {\r\n                        if (typeof element === \"object\" && element !== null) {\r\n                            var path = element.$ref;\r\n                            if (typeof path === \"string\" && px.test(path)) {\r\n                                value[i] = eval(path);\r\n                            } else {\r\n                                rez(element);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    Object.keys(value).forEach(function (name) {\r\n                        var item = value[name];\r\n                        if (typeof item === \"object\" && item !== null) {\r\n                            var path = item.$ref;\r\n                            if (typeof path === \"string\" && px.test(path)) {\r\n                                value[name] = eval(path);\r\n                            } else {\r\n                                rez(item);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }($));\r\n        return $;\r\n    };\r\n}\r\n\r\n\r\n\r\n// detect if the object is cyclic\r\nJSON.isCyclic = function(obj) {\r\n    var seenObjects = [];\r\n  \r\n    function detect (obj) {\r\n      if (obj && typeof obj === 'object') {\r\n        if (seenObjects.indexOf(obj) !== -1) {\r\n          return true;\r\n        }\r\n        seenObjects.push(obj);\r\n        for (var key in obj) {\r\n          if (obj.hasOwnProperty(key) && detect(obj[key])) {\r\n            console.log(obj, 'cycle at ' + key);\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    return detect(obj);\r\n}\r\n\r\n\r\n\r\n// other method to detect if object is cyclic\r\nJSON.isCyclic2 = function(obj) {\r\n    var keys = [];\r\n    var stack = [];\r\n    var stackSet = new Set();\r\n    var detected = false;\r\n  \r\n    function detect(obj, key) {\r\n      if (obj && typeof obj != 'object') { return; }\r\n  \r\n      if (stackSet.has(obj)) { // it's cyclic! Print the object and its locations.\r\n        var oldindex = stack.indexOf(obj);\r\n        var l1 = keys.join('.') + '.' + key;\r\n        var l2 = keys.slice(0, oldindex + 1).join('.');\r\n        console.log('CIRCULAR: ' + l1 + ' = ' + l2 + ' = ' + obj);\r\n        console.log(obj);\r\n        detected = true;\r\n        return;\r\n      }\r\n  \r\n      keys.push(key);\r\n      stack.push(obj);\r\n      stackSet.add(obj);\r\n      for (var k in obj) { //dive on the object's children\r\n        if (Object.prototype.hasOwnProperty.call(obj, k)) { detect(obj[k], k); }\r\n      }\r\n  \r\n      keys.pop();\r\n      stack.pop();\r\n      stackSet.delete(obj);\r\n      return;\r\n    }\r\n  \r\n    detect(obj, 'obj');\r\n    return detected;\r\n  }","import Structure from '../nestedSelectsReact/createStructure';\r\nimport './cycle';\r\n\r\n// parse react childrens\r\nclass ParseChildren{\r\n    constructor(nestedSelectReactchildren){\r\n        this.nestedSelectReactchildren = nestedSelectReactchildren;\r\n        this.principalSelects = [];\r\n        // structure API\r\n        this.struct = new Structure();\r\n    }\r\n\r\n \r\n\r\n    // este metodo analiza una <Option/> ó una optionNode{} a la vez\r\n    // para ver si dicha opción tiene sub-elementos\r\n    // en caso de tenerlos se llama recursivamente en el método 'this.checkTypeOfChildrenComponents()'\r\n    // si no tiene sub-elementos simplemente retorna un optionNode hecho con la Structure API \r\n    findSubElementsInEachOption(reactOptionChildren, optionNode = null){\r\n        // si no es un nodo option hecho anteriormente con la api\r\n        if(!optionNode){\r\n            let { value, children } = reactOptionChildren.props;\r\n            let text, makeVisibleChildren ;\r\n            // the option have 2 or more children\r\n            if( Array.isArray(children) ){\r\n                text = children[0];\r\n                makeVisibleChildren = children[1].props.children;\r\n            }\r\n            else text = children; // is a string \r\n            \r\n            // make option\r\n            let option = this.struct.makeElement('option', { value, text });\r\n            // the option have 2 children, text and <MakeVisible>\r\n            if( Array.isArray(children) ){\r\n                // have multiple children inside <MakeVisible>\r\n                if( Array.isArray(makeVisibleChildren) ){\r\n                    for(let element of makeVisibleChildren){\r\n                        // decycle json\r\n                        element = JSON.decycle(element);\r\n                        this.checkTypeOfChildrenComponents(element, option);\r\n                    }\r\n                }\r\n                // have just one child inside <MakeVisible>\r\n                else {\r\n                    // decycle json\r\n                    makeVisibleChildren = JSON.decycle(makeVisibleChildren);\r\n                    this.checkTypeOfChildrenComponents(makeVisibleChildren, option);\r\n                }\r\n\r\n            }\r\n    \r\n            return option;\r\n        }\r\n        // si es un optionNode pasado por parametro\r\n        else{\r\n            this.checkTypeOfChildrenComponents(reactOptionChildren, optionNode);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    // analizar el elemento y ver que tipo es, por ejemplo \r\n    // <Select/>, <Option/>, <MakeVisible/>, ó un <componente react />\r\n    // si es un <Select/> se analiza cada una de sus <Option/> para ver si tiene <MakeVisible/> dentro\r\n    // si NO es un <Select/> solo se agrega el <componente react> a la propiedad makevisible\r\n    // de la opción. option.makeVisible.push( <componente react> )\r\n    checkTypeOfChildrenComponents(reactElement, optionNode){\r\n        let elementNode, // select, option or component node, made with the structure API\r\n        reactSelectOptions, // <Option>'s from <Select/>\r\n        opts = [], // option node made with structure API\r\n        optChildren, // each posible children of an <Option/>\r\n        makeVisibleComponentChildren; // all the children inside a <MakeVisible/> component\r\n        \r\n\r\n        // create the element node with the structure API\r\n        elementNode = this.createElementNode(reactElement);\r\n        \r\n        \r\n        // check the type of the created node \r\n        if(elementNode.elementType === 'select'){\r\n            // agregar sub select a la lista de makeVisible\r\n            optionNode.makeVisible.push( elementNode );\r\n            // convertir cada <Option/> en un objeto option, con ayuda de la API\r\n            reactSelectOptions = reactElement.props.children;\r\n\r\n            // have 2 or more options\r\n            if( Array.isArray(reactSelectOptions) ){\r\n                for(let opt of reactSelectOptions){\r\n                    opts.push( this.createElementNode(opt) )\r\n                }\r\n            }\r\n            // just 1 option\r\n            else {\r\n                opts.push( this.createElementNode(reactSelectOptions))\r\n            }\r\n\r\n            // asociar opciones al sub-select\r\n            elementNode.options = opts;\r\n            \r\n            // ir por cada una de las opciones viendo si tienen subElementos '<MakeVisible/>'\r\n            for(let i = 0; i < elementNode.options.length; i++){\r\n                // si una de las opciones tiene más de un hijo\r\n                // es porque tiene un <MakeVisible/>\r\n                \r\n                const optionChildren = Array.isArray(reactSelectOptions) ? reactSelectOptions[i] : reactSelectOptions; \r\n                if(optionChildren.props.children instanceof Array){\r\n                    optChildren = reactSelectOptions[i].props.children; \r\n                    makeVisibleComponentChildren = optChildren[1].props.children;\r\n                    // iterar por cada uno de los componentes hijos de <MakeVisible/>\r\n                    \r\n                    // en caso de que el <MakeVisible> tenga un (1) solo hijo\r\n                    if(makeVisibleComponentChildren instanceof Array === false){\r\n                        this.checkTypeOfChildrenComponents(\r\n                            makeVisibleComponentChildren, \r\n                            elementNode.options[i] // opcion actual <<i>> \r\n                        );\r\n                    }\r\n                    // en caso de que tenga mas de un (1) hijo el <MakeVisible>\r\n                    else{\r\n                        for(let j = 0; j < makeVisibleComponentChildren.length ; j++){\r\n                            // recursive call for 'findSubElementsInEachOption()'\r\n                            // in case the current node is of type 'select' since a select has\r\n                            // several options and these in turn can have several sub elements\r\n                            this.findSubElementsInEachOption(\r\n                                makeVisibleComponentChildren[j],\r\n                                elementNode.options[i]\r\n                            );\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        else if(elementNode.elementType === 'component'){\r\n            optionNode.makeVisible.push( elementNode );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // create the element depends element type\r\n    // returns { elementNode: Object }\r\n    createElementNode(reactElement){\r\n        let elementNode;\r\n        const name = reactElement.type.name; \r\n        // is a <Select> or a <Option> or a custom react component like '<MyComponent />'\r\n        if(name){\r\n            if(name === \"Select\"){\r\n                \r\n                elementNode = this.struct.makeElement('select', {...reactElement.props}  )\r\n            }\r\n            else if(name === 'Option'){\r\n                elementNode = this.struct.makeElement('option', {...reactElement.props}  )\r\n                // <Option> text\r\n                if(typeof reactElement.props.children === \"string\"){\r\n                    elementNode.text = reactElement.props.children;\r\n                }\r\n                else{\r\n                    elementNode.text = reactElement.props.children[0];\r\n                }\r\n            }\r\n            else{\r\n                elementNode = this.struct.makeElement('component', {\r\n                    // name: reactElement.type.name + '-' + Math.random(), // random name,\r\n                    name: reactElement.type.name,\r\n                    component: reactElement\r\n                });\r\n            }\r\n        }\r\n        // is a default react component like <h1>, <p>, <a>, <div>, etc\r\n        else{\r\n            elementNode = this.struct.makeElement('component', {\r\n                name: reactElement.type + '-' + Math.random(), // random name,\r\n                component: reactElement\r\n            })\r\n        }\r\n\r\n        return elementNode;\r\n    }\r\n\r\n\r\n    // ============= parse components to object with the structure API =============\r\n    getParsedData(){\r\n        \r\n        let nestedSelectReactchildren;\r\n\r\n        if(this.nestedSelectReactchildren instanceof Array)\r\n            nestedSelectReactchildren = this.nestedSelectReactchildren; \r\n        else\r\n            nestedSelectReactchildren = [this.nestedSelectReactchildren];\r\n        \r\n\r\n        // principal selects\r\n        for(let reactPrincipalSelect of nestedSelectReactchildren){\r\n            \r\n            const { \r\n                name, \r\n                id, \r\n                customchange, \r\n                label, \r\n                placeholder,\r\n                'children': reactOptionsChildren \r\n            } = reactPrincipalSelect.props;\r\n            \r\n            \r\n            // make select with the API\r\n            const select = this.struct.makeElement('select', {\r\n                name,\r\n                id,\r\n                customchange,\r\n                label,\r\n                placeholder, \r\n            });\r\n     \r\n            // loop each <Option/> and its sub-elements\r\n            let options = [];\r\n\r\n            if( Array.isArray(reactOptionsChildren) ){\r\n                \r\n                for(let reactOptionChild of reactOptionsChildren){\r\n                    options.push( this.findSubElementsInEachOption(reactOptionChild) );\r\n                };\r\n            } \r\n            else{\r\n                options.push(this.findSubElementsInEachOption(reactOptionsChildren));\r\n            }\r\n            \r\n            // add options to current principalSelect\r\n            this.struct.addOptionsToSelect(select, options);\r\n            \r\n\r\n            // save the select to principal selects\r\n            this.principalSelects.push(select);\r\n\r\n        }\r\n\r\n        \r\n        \r\n        \r\n        // JSON.decycle './cycle.js' to get a plain javascript object\r\n        // let decycleObjectsArr = this.principalSelects.map( obj => JSON.decycle(obj) );\r\n\r\n           \r\n        // parsed components\r\n        // return decycleObjectsArr;\r\n        return this.principalSelects;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ParseChildren;","\r\n// mapear todos los subelementos de cada elemento que viene en la estructura original,\r\n// es decir, la estructura hecha a mano o con la API, para relacionar el elemento con sus datos\r\n// y guardar éstos últimos (datos) en el selectStoreData.\r\n// Ésto se hace porque cuando el usuario selecciona un <select> anterior aún se sigue\r\n// guardando el valor de sus hijos los cuales ya no estarían en pantalla, y eso no debe ser asi.\r\n// ya que solamente se debe guardar el valor de los <select> en pantalla y los <Component/> en pantalla.\r\nfunction mapOriginalElementsToStoreData(originalSelectsArray){\r\n    \r\n    let dataOfEachNode = {};\r\n\r\n    const findRecursively = node => {\r\n        const { id, name, options} = node;\r\n        const key = String(id || name);\r\n        // guardar la referencia\r\n        dataOfEachNode[key] = {\r\n            nodeData: {},\r\n            childrenNames: []\r\n        } \r\n        // revisar las <option>\r\n        for(let option of options || []){\r\n            const { makeVisible } = option;\r\n            // revisar makeVisible de las <option>\r\n            if(makeVisible){\r\n                for(let toMakeVisibleElement of makeVisible){\r\n                    const { name, id } = toMakeVisibleElement;\r\n                    // agregar nombre a la lista de nombres de los hijos de su padre, Suena raro verdad? xD\r\n                    dataOfEachNode[key].childrenNames.push(id || name);\r\n                    \r\n                    // iterar recursivamente hacia los elementos más internos\r\n                    findRecursively(toMakeVisibleElement);\r\n                    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // iterar por los principales <select>\r\n    for(let node of originalSelectsArray){\r\n        findRecursively(node);\r\n    }\r\n\r\n    return dataOfEachNode;\r\n} \r\n\r\n\r\n// mapear el <Component/> al selectStoreData{} para asi poder\r\n// guardar sus datos cuando esté en pantalla y también para poder borrar dichos datos\r\n// en caso de ya no estar en pantalla\r\n// nombre larguisimo pero al menos se entiende lo que hace la función xd\r\nfunction mapComponentInsertedWithCustomOnChangeToStoreData(selectName, componentName, selectStoreData){\r\n    const selectsData = {...selectStoreData};\r\n    const { childrenNames } = selectsData[selectName];\r\n    // incluir el nuevo componente en el storage\r\n    childrenNames.push(componentName);\r\n    \r\n    selectsData[componentName] = {\r\n        nodeData: {},\r\n        childrenNames: []\r\n    }\r\n\r\n    // ahora se debe encontrar todos los elementos por encima del <Component />\r\n    // para que al momento de seleccionar un anterior <select> ya no se guarden más\r\n    // los datos selectsData{}, en resumen, si no esta en pantalla, no se guardan sus datos\r\n    const updateChildrenNamesRecursively = (childrenNames) => {\r\n        for(let name of childrenNames){\r\n            // array con el nombre de los hijos\r\n            const names = selectsData[name].childrenNames;\r\n\r\n            if(!name.includes(componentName) && names.length > 0) names.push(componentName);\r\n\r\n            updateChildrenNamesRecursively(names);\r\n        }\r\n    }\r\n\r\n    updateChildrenNamesRecursively(childrenNames);\r\n    return selectsData;\r\n\r\n}\r\n\r\n\r\n\r\n// borrar datos viejos de selectStoreData\r\nfunction deleteOldSelectStoreData(selectName, selectStoreData){\r\n    const selectsData = {...selectStoreData};\r\n    \r\n    const { childrenNames } = selectsData[selectName];\r\n\r\n    const deleteRecursively = (childrenNames) => {\r\n        for(let name of childrenNames || []){\r\n            // borrar datos\r\n            selectsData[name].nodeData = {}\r\n            // nombre de los hijos\r\n            const names = selectsData[name].childrenNames;\r\n            if(names.length) deleteRecursively(names);\r\n        }\r\n    }\r\n\r\n    deleteRecursively(childrenNames);\r\n\r\n    return selectsData;\r\n} \r\n\r\n\r\n\r\n// parsear selectStoreData para tener los datos limpios en un json\r\nfunction parseSelectsStoreData(selectStoreData){\r\n    let cleanData = {};\r\n\r\n    for(let key in selectStoreData){\r\n        let { nodeData } = selectStoreData[key];\r\n        // is not a void value\r\n        if(Object.keys(nodeData).length > 0){\r\n\r\n            if(typeof nodeData === 'string'){\r\n                cleanData[key] = nodeData;\r\n            }\r\n            // else, have a <Component/> keyName { [MyComponentName]: {...componentValues} }\r\n            else{\r\n                const componentName = Object.keys(nodeData)[0];\r\n                cleanData[componentName] = nodeData[componentName];\r\n            }\r\n        }\r\n    }\r\n    return cleanData;\r\n}\r\n\r\n// parse the <select> data with parseSelectsStoreData method\r\nfunction parse(jsonToParse){\r\n    return parseSelectsStoreData(jsonToParse);\r\n}\r\n\r\n\r\n \r\n\r\nexport {\r\n    parse,\r\n    mapOriginalElementsToStoreData,\r\n    mapComponentInsertedWithCustomOnChangeToStoreData,\r\n    deleteOldSelectStoreData,\r\n}","import React, { Component, cloneElement } from 'react';\r\n// functional components\r\nimport { MakeSelect } from './functionalComponents';\r\n// api\r\nimport UserAPI from './createStructure';\r\n// utils\r\nimport ParseChildren from '../utils/parseChildren';\r\nimport { \r\n    parse,\r\n    mapOriginalElementsToStoreData,\r\n    mapComponentInsertedWithCustomOnChangeToStoreData,\r\n    deleteOldSelectStoreData\r\n } from '../utils/storeDataControl';\r\n\r\n\r\nclass NestedSelectsReact extends Component{ \r\n   \r\n    state = {\r\n        originalSelects: null,\r\n        htmlToDraw: [],\r\n        loading: true\r\n    }\r\n\r\n    \r\n    elementsStructure = []; // array de objetos con subObjetos dentro. Estructura de todos los <select> en forma de arbol\r\n    linearHtmlArrNodes = []; // array para renderizarlos de forma lineal, separado en grupos grandes (ver método organizarElementos )\r\n    \r\n    // guarda una referencia nombre-valor para guardar los components que se quieran renderizar\r\n    // se hace esto debido a que JSON.stringify no guarda métodos\r\n    componentsReferences = {};\r\n    \r\n    // guarda una referencia { name: function } ó { id: function } para guardar las funciones onChange personalizadas \r\n    // \"customchange\". Esto se hace debido a que JSON.stringify no guarda métodos y/o funciones\r\n    customOnChangeReferences = {};\r\n    \r\n    // api que permite al usuario crear objetos de elementos\r\n    // aquí en este componente se usará para manejar más comodamente el evento customchange\r\n    userAPI = new UserAPI();\r\n    \r\n    // $$$$$ cambiar el comentario de abajo $$$$$\r\n\r\n    // guardar los datos necesarios de los componentes hijos renderizados.\r\n    // Básicamente es un objeto para guardar los estados de los componentes hijos\r\n    // esto se hace para no tener que traerse todo el estado del componente\r\n    // ya que no necesariamente todos los datos del estado del hijo son los que se desean guardar.\r\n    // Se guardaría asi: { 'component-name': { key: value, ... } }\r\n    STOREDATA =  {};\r\n    STOREDATA_PARSED = {};    \r\n    \r\n\r\n\r\n    \r\n    // handle onchange to create and insert new sub-select or <Component/> \r\n    handleOnChange = (ev) => {\r\n        const select  = ev.target;\r\n        const { 'name': selectName, value, id } = select;\r\n        \r\n        // ***** guardar datos del <select> seleccionado *****\r\n        // delete childs values\r\n        this.STOREDATA = deleteOldSelectStoreData(id || selectName, this.STOREDATA);\r\n        // save selected value in the storage <<selectStoreData>>\r\n        this.STOREDATA[id || selectName].nodeData = value;\r\n\r\n\r\n        // comprobar si tiene un customchange o no.\r\n        // en caso de tenerlo ejecutarlo y no hacer nada mas.\r\n        const customchange = this.customOnChangeReferences[id || selectName];\r\n        \r\n        // customchange de parte de la API es asi:\r\n        // (value: String, insertElement?: Function ) => void;\r\n        if(customchange){            \r\n            // borrar hijos viejos del <select> (ya sea que los tenga o no)\r\n            this.findAndRemoveSubElementsRecursively(this.elementsStructure, selectName);\r\n            this.prepareToDraw(this.elementsStructure);\r\n            \r\n            // ejecutar callback\r\n            customchange(\r\n                    value, \r\n                    (selectName, ...elementsArrayObjects) => {                    \r\n                        this.insertElementsCustomOnChange(id || selectName, ...elementsArrayObjects);\r\n                });\r\n            // return <select> and <Components> values to <NestedSelects/> parent element\r\n            this.props.getvalues( parse(this.STOREDATA) );\r\n            \r\n            return; // stop and exit\r\n        }\r\n        // en caso de el <select> NO tener customchange revisar las opciones del <select> actual y\r\n        // ver si dichas opciones tienen o no el atributo makevisible\r\n        // option selected\r\n        const option = select.querySelector(`option[value=\"${value || ''}\"]`);\r\n        // get the 'makevisible' attribute object from an <option/>\r\n        let makeElementsVisible = JSON.parse(option.getAttribute('makevisible') || '[]');\r\n        \r\n        // if the option has makeElementsVisible, insert in the structure and then render it. \r\n        if(makeElementsVisible.length > 0){\r\n            let newElementsToDraw = []; // save the sub elements to draw\r\n             \r\n            // loop sub-elements to be visibles\r\n            for(let element of makeElementsVisible){\r\n                newElementsToDraw.push(this.makeStructureNode(element, selectName));\r\n            }\r\n            \r\n            // clean old subElements\r\n            this.findAndRemoveSubElementsRecursively(this.elementsStructure, selectName);\r\n            // insert new subElement in structure\r\n            this.insertInStructure(this.elementsStructure,newElementsToDraw, selectName);\r\n            // return <select> and <Components> values to <NestedSelects/> parent element\r\n            this.props.getvalues( parse(this.STOREDATA) );\r\n            // prepare stucture to draw and update the state\r\n            this.prepareToDraw(this.elementsStructure);\r\n        }\r\n        // simple option without sub-select\r\n        else{\r\n            this.findAndRemoveSubElementsRecursively(this.elementsStructure, selectName);\r\n            // return <select> and <Components> values to <NestedSelects/> parent element\r\n            this.props.getvalues( parse(this.STOREDATA) );\r\n            this.prepareToDraw(this.elementsStructure);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    // recorrer la estructura de elementos (el array elementsStruture que posee todos los elementos a renderizar en forma de objetos)\r\n    // para poder insertar los subElements correspondientes a un <select> padre\r\n    // básicamente lo que hace es iterar recursivamente y modificar los objetos que se encuentran en this.elementsStructure\r\n    insertInStructure = (elementsStructure, elementsToInsert, fatherName) => {\r\n        for(let structureNode of elementsStructure){\r\n            \r\n            // si el nombre del nodo por el que va resulta ser el mismo que el padre\r\n            // y si no tiene sub elementos, es porque ése nodo es el padre al cual \r\n            // se le asignaran los sub elementos hijos. Es decir, se encontró al nodo padre.\r\n            if(structureNode.elementName === fatherName && structureNode.subElements.length === 0){\r\n                // se asigna los sub elementos al padre\r\n                structureNode.subElements = elementsToInsert;\r\n                return;\r\n            }\r\n            // si el nombre del nodo actual no es igual al del padre, es porque dicho nodo no es\r\n            // a quien se le asignarán los sub elementos hijos, si es asi, revisar si el nodo tiene\r\n            // sub elementos y seguir buscando recursivamente al nodo padre entre ellos\r\n            if(structureNode.elementName !== fatherName && structureNode.subElements.length){\r\n                this.insertInStructure(structureNode.subElements, elementsToInsert, fatherName);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // save in an array all the elements to draw, then set the state\r\n    prepareToDraw = elementsStructure => {\r\n\r\n        this.linearHtmlArrNodes = []; // reset arr elements\r\n        this.pushNodesToLinearArr(elementsStructure);\r\n\r\n        // update state\r\n        this.setState({\r\n            htmlToDraw: this.linearHtmlArrNodes,\r\n        })\r\n    }\r\n\r\n    // #############################################################\r\n    // #################### find sub elements ######################\r\n    // #############################################################\r\n \r\n    // find sub elements recursively and push to linearHtmlArrNodes\r\n    pushNodesToLinearArr = elementsStructure => {\r\n        for(let elementNode of elementsStructure){\r\n            this.linearHtmlArrNodes.push(elementNode);\r\n            // ver si tiene sub elementos, para de esa manera respetar el orden en el cual serian pintados\r\n            // es decir, si hay 2 principales <select> se checan primero todos los posibles sub elementos\r\n            // del primer <select> y luego en la segunda iteracion del ciclo 'for' si vendria el 2do principal <select>\r\n            // con sus respectivos sub elementos hijos\r\n            if(elementNode.subElements.length > 0){\r\n                this.pushNodesToLinearArr(elementNode.subElements);\r\n            }\r\n        }\r\n    }\r\n\r\n    // find and remove sub elements when the user select a previous option or user select a normal <select>\r\n    findAndRemoveSubElementsRecursively = (elementsStructure, elementName) => {\r\n        for(let elementNode of elementsStructure){\r\n            if(elementNode.elementName === elementName){\r\n                elementNode.subElements = []; // remove subElements\r\n                return;\r\n            }\r\n            else if(elementNode.subElements.length){\r\n                this.findAndRemoveSubElementsRecursively(elementNode.subElements, elementName);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // ***************** *************** **************** *************** **************\r\n    // insertar elementos con el customchange\r\n    // manejar la inserción de nuevos elementos en caso de hacer un customchange\r\n    insertElementsCustomOnChange(selectName, ...elementsArrayObjects){        \r\n        const objectElements = [];\r\n        const elementsToInsert = [];\r\n        let elementName;\r\n\r\n        // ***** 1er paso: estandarizar, convertir los elementos en objetos, tal\r\n        // cual como se haría con la API para los usuarios \r\n\r\n        // iterar por el arreglo de elementos y ver que tipo son\r\n        // ver si ya fueron creados con la API o son solo react components\r\n        for(let [index, element] of elementsArrayObjects.entries()){\r\n            // es creado con la API\r\n            if(element.elementType) objectElements.push(element);\r\n            // es un react component, meterlo en un objeto, como se haría normalmente en la API\r\n            else{\r\n                // si es un elemento <Select> hecho con los componentes build in, \r\n                // NOTA: con build in me refiero a los componentes dentro de la carpeta 'src/components'  \r\n                if(element.props && /\\bSelect\\b/.test(element.type.name)){\r\n                    // si es un build in <Select> se supone que ya tiene nombre o id unicos\r\n                    elementName = element.props.id || element.props.name;\r\n                    const parser = new ParseChildren([element]);\r\n                    objectElements.push( parser.getParsedData()[0] );\r\n                    \r\n                }else{ // es un componente hecho por el/la programador/a \r\n                    // react component name, +index is for unique key;\r\n                    elementName = (element.type.name || element.type) + '-' + index;\r\n                    objectElements.push(\r\n                        this.userAPI.makeElement('component', {\r\n                            name: elementName,\r\n                            component: element\r\n                        })\r\n                    )\r\n                }\r\n                \r\n\r\n            }\r\n            // ***** 2do paso: mapear el componente al selectStoreData para asi poder\r\n            // guardar sus datos cuando esté en pantalla y también para poder borrar dichos datos\r\n            // en caso de ya no estar en pantalla\r\n            this.STOREDATA = mapComponentInsertedWithCustomOnChangeToStoreData(\r\n                selectName, \r\n                element.name || elementName,\r\n                this.STOREDATA\r\n            );\r\n\r\n        }\r\n\r\n        // ***** 3er paso: convertir cada objeto en un nodo e insertarlo en la estructura.\r\n        // NestedSelectsReact trabaja con una estructura, la cual es un Array con nodos dentro\r\n        // dichos nodos son un objeto un poquito diferente a los objetos creados con la API\r\n        // para saber más de estos nodos, revisar el método makeStructureNode\r\n        for(let objectElement of objectElements){\r\n            elementsToInsert.push(\r\n                this.makeStructureNode(objectElement, selectName)\r\n            )\r\n        }\r\n\r\n        // borrar hijos viejos del <select> (ya sea que los tenga o no)\r\n        this.findAndRemoveSubElementsRecursively(this.elementsStructure, selectName);\r\n        // insertar nuevos elementos hijos en la estructura\r\n        this.insertInStructure(this.elementsStructure, elementsToInsert, selectName);\r\n        // preparar para dibujar\r\n        this.prepareToDraw(this.elementsStructure);\r\n\r\n    }\r\n\r\n    // ##############################################################\r\n\r\n    // revisar toda la estructura en busca de componentes de React (jsx components)\r\n    // para luego guardarlos y asociarlos a su elemento correspondiente\r\n    // esto se hace debido a que JSON.stringify no guarda funciones o métodos\r\n    findComponentsInStructure(structure = []){\r\n        let objComponents = {}\r\n        // iterar por las opciones y por los elementos dentro de makeVisible\r\n        function loopOptionsAndMakevisibleArrays(arrayOptions = []){\r\n            for (let option of arrayOptions) {\r\n                // si la option quiere hacer algo visible\r\n                if(option.makeVisible){\r\n                    for(let toMakeVisibleElement of option.makeVisible){\r\n                        \r\n                        const {elementType, name, id, component, options} = toMakeVisibleElement;\r\n                        if( /component/i.test(elementType) ){\r\n                            // guardar la referencia del componente\r\n                            objComponents[id || name] = component;\r\n                        }\r\n                        // si no es un componente es porque es un <select> \r\n                        // en ese caso, iterar recursivamente para ver si hay sub componentes en la opciones de ese select\r\n                        else if( /select/i.test(elementType) ){\r\n                            loopOptionsAndMakevisibleArrays(options);\r\n                        } \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // iterar a travez de los principales <select> de la estructura original\r\n        for(let element of structure){\r\n            // iterar cada una de las opciones\r\n            loopOptionsAndMakevisibleArrays(element.options);\r\n        }\r\n\r\n        return objComponents;\r\n    }\r\n\r\n\r\n\r\n    // encontrar todos los customchange en la estructura original y guardar una referencia\r\n    findAllCustomChange(structure){\r\n\r\n        let objReferences = {};\r\n\r\n        const findRecursively = node => {\r\n            const {customchange, id, name, options} = node;\r\n            // es un select con un customchange\r\n            if(customchange) {\r\n                const key = id || name;\r\n                // guardar la referencia\r\n                objReferences[key] = customchange;\r\n            }\r\n            // revisar las <option>\r\n            for(let option of options){\r\n                const { makeVisible } = option;\r\n                // revisar makeVisible de las <option>\r\n                if(makeVisible){\r\n                    for(let toMakeVisibleElement of makeVisible){\r\n                        const { elementType } = toMakeVisibleElement;\r\n                        if(elementType === 'select'){\r\n                            findRecursively(toMakeVisibleElement);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // iterar por los principales <select>\r\n        for(let node of structure){\r\n            findRecursively(node);\r\n        }\r\n\r\n        return objReferences;\r\n    }\r\n    \r\n\r\n\r\n\r\n    // insert pricipal <selects> and sub-elements in a order matrix\r\n    // make an individual array container for each principal <select>\r\n    // return [ [principalSelect and childs], [principalSelect and childs], ... ]\r\n    // NOTA: se usa mucho la palabra 'superior' en los comentarios, ésta se refiere a\r\n    // los <select> superiores con los que trabaja MultiSelect-react, es decir, \r\n    // los principales selects ( los primeros que ve el usuario )\r\n    // éste método no hace más que agruparlos para que esten ordenados a la hora de mostrarlos.\r\n    organizarElementos = linearHtmlArrNodes => {\r\n        \r\n        let principalElements = [];\r\n        let groups = [];\r\n\r\n        for(let i = 0; i < linearHtmlArrNodes.length; i++){\r\n            let { htmlElement, father } = linearHtmlArrNodes[i];\r\n            // si el elemento no es de los principales, agruparlo con\r\n            // el principal del momento\r\n            if(father){\r\n                groups.push( htmlElement );\r\n                // ver si el siguiente elemento existe y es principal, para agregar los que van y limpiar el grupo.\r\n                if(linearHtmlArrNodes[i+1]){\r\n                    // si no tiene padre es que es un principal select\r\n                    if(!linearHtmlArrNodes[i+1].father){\r\n                        principalElements.push(groups); // añadir a los principales\r\n                        groups = []; // limpiar grupo\r\n\r\n                    }\r\n                }\r\n                // si es el ultimo elemento, sale del ciclo for\r\n                // y se añade al grupo\r\n            }\r\n            // es principal\r\n            else{\r\n                // añadir al grupo\r\n                groups.push(htmlElement);\r\n                // comprobar si existe el siguiente elemento\r\n                if(linearHtmlArrNodes[i+1]){\r\n                    // ver si ese elemento siguiente es pricipal\r\n                    // ¡¡¡ si no lo es, simplemente itera al siguiente elemento !!!\r\n                    if(!linearHtmlArrNodes[i+1].father){\r\n                        // añadir grupo a los elementos principales\r\n                        principalElements.push(groups);\r\n                        groups = []; // resetear grupo\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // añadir el ultimo grupo a los elementos principales\r\n        principalElements.push(groups);\r\n        return principalElements;\r\n\r\n    }\r\n\r\n\r\n\r\n    // crear nodos para la estructura. <<this.elementsStructure>>\r\n    makeStructureNode(element, fatherName, isSubSelect = true){\r\n        const { elementType, name, id } = element;\r\n        const key = String(id || name);\r\n        let node;\r\n        let htmlElement;\r\n\r\n        // dependiendo del tipo de elemento se debe preparar de diferente manera su\r\n        // htmlElement, para un select se crea un <select> y para un componente react\r\n        // se crea una copia del mismo\r\n        \r\n        // <select>\r\n        if(/select/i.test(elementType)){\r\n            htmlElement = <MakeSelect \r\n                            select={element}\r\n                            isSubSelect={isSubSelect}\r\n                            onChange={this.handleOnChange}\r\n                            key={key}\r\n                          />\r\n        }\r\n        // <Component />\r\n        else if(/component/i.test(elementType)){\r\n            // si no hay una referencia del componente es porque se está incluyendo un nuevo\r\n            // componente por medio de un customchange, de ser asi, guardarlo.\r\n            if(!this.componentsReferences[key]){\r\n                this.componentsReferences[key] = element.component;\r\n            } \r\n\r\n            // crear proxy para detectar si se hace un cambio en el this.STOREDATA dentro del componente\r\n            const that = this;\r\n            let checker = {\r\n                set: function(obj, prop, value) {\r\n                    // The default behavior to store the value\r\n                    obj[prop] = value;\r\n                    // parsear data de los <select> y sub componentes   \r\n                    that.props.getvalues( parse(that.STOREDATA) );\r\n                    return true;\r\n                }\r\n              };\r\n              \r\n            let storedata = new Proxy(this.STOREDATA[key].nodeData , checker); \r\n\r\n            htmlElement = cloneElement(\r\n                this.componentsReferences[key], // react <Component /> reference\r\n                { \r\n                    // storedata: this.selectStoreData[key].nodeData,\r\n                    storedata,\r\n                    key\r\n                }\r\n            );\r\n        }\r\n\r\n        node = {\r\n            father: fatherName, // parent <select/>\r\n            elementName: key,\r\n            elementType,\r\n            htmlElement,\r\n            subElements: []\r\n        };\r\n\r\n        return node;\r\n    }\r\n\r\n\r\n\r\n    // aqui se añaden los primeros elementos la estructura, que serían los principales <select>\r\n    // además de encontrar y guardar los react components en el objeto componentsReferences{} para luego\r\n    // referenciarlos en dicha estructura. \r\n    componentDidMount(){\r\n        let { htmlToDraw } = this.state;\r\n        let originalSelects;\r\n\r\n        // structure made with children components\r\n        if(this.props.children){\r\n            \r\n            const childrenParser = new ParseChildren(this.props.children);\r\n            originalSelects = [...childrenParser.getParsedData()];       \r\n                  \r\n        }\r\n        // structure made with the API or handmade\r\n        else if(this.props.selects){\r\n            originalSelects = this.props.selects\r\n        }\r\n        // structure not provided \r\n        else{\r\n            throw new Error(\r\n                'Structure not provided \\n' +\r\n                'you have to pass the structure by selects prop <NestedSelects selects={structArr} />\\n' +\r\n                'or use nested-selects-react components as children of <NestedSelects>{children}</NestedSelects> \\n'\r\n            );        \r\n        }     \r\n        \r\n        if(!this.props.getvalues){\r\n            throw new Error(\r\n                'getvalues callback not provided \\n' +\r\n                'you have to pass the getvalues callback: <NestedSelects getvalues={myCallback} />\\n' +\r\n                'this is necessary so that you can get the values ​​inside NestedSelects \\n'\r\n            );\r\n        }\r\n        \r\n        // prepare the initials <select/>\r\n        for(let select of originalSelects){\r\n            // save a node with some information about the <select>.\r\n            htmlToDraw.push(this.makeStructureNode(select, null, false));\r\n        }\r\n        \r\n        // set first modification to structure\r\n        this.elementsStructure = htmlToDraw\r\n        // find and save react <Components /> reference \r\n        this.componentsReferences = this.findComponentsInStructure(originalSelects);\r\n        // find and save customchange reference \r\n        this.customOnChangeReferences = this.findAllCustomChange(originalSelects);\r\n        // map fathers with his childrens\r\n        this.STOREDATA = mapOriginalElementsToStoreData(originalSelects);\r\n\r\n        // first state modification\r\n        this.setState({\r\n            loading: false,\r\n            htmlToDraw,\r\n            originalSelects\r\n        })\r\n    }\r\n\r\n\r\n\r\n    // ************************** render ****************************\r\n    render(){\r\n        let { htmlToDraw, loading } = this.state;\r\n        let principalSelects;\r\n        // elementos agrupados por <selects>\r\n        if(!loading) principalSelects = this.organizarElementos(htmlToDraw)\r\n\r\n\r\n        \r\n        if(loading) return null;\r\n\r\n        return (\r\n            <div className=\"nsr-container\">\r\n                <div className=\"nsr\">\r\n                    { principalSelects.map( (element, index) => {\r\n                        return( \r\n                            <div key={index} className={`nsr-principalSelect nsr-principalSelect${index}`}>\r\n                                {element}\r\n                            </div> \r\n                        )\r\n                    }) }\r\n                </div>\r\n            </div>\r\n        ) \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default NestedSelectsReact;","import React from 'react';\r\n\r\nfunction Select({name, id, customchange, children}){\r\n    \r\n    return <></>;\r\n}\r\n\r\nexport default Select;","import React from 'react';\r\n\r\nfunction Option({value, children}){\r\n    return <></>;\r\n}\r\n\r\nexport default Option;","import React from 'react';\r\n\r\nfunction MakeVisible({children}){\r\n    return <></>;\r\n}\r\n\r\nexport default MakeVisible;","module.exports = {\r\n    nativeClasses:\r\n`\r\n.nsr{\r\n    background-color: darkorchid;\r\n    padding: 25px;\r\n}\r\n\r\n.nsr-principalSelect{\r\n    background-color: royalblue;\r\n    padding: 15px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.nsr-select-container{\r\n    background-color: darkred;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.nsr-label{\r\n    color: white;\r\n    font-weight: bolder;\r\n}\r\n\r\n.nsr-sub-select{\r\n    background-color: yellow;\r\n}\r\n`,\r\n\r\n    specificElements: \r\n`\r\n.nsr-container select{\r\n    padding: 7px 12px;\r\n    border: 4px dotted fuchsia;\r\n}\r\n`\r\n};","import React from 'react';\r\nimport './loader.css';\r\n\r\nconst Loader = () => (\r\n    <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n);\r\n\r\nexport default Loader;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst SelectFlag = ({country, flagURL, onChangeHandler}) => (\r\n\r\n    <div className=\"SelectFlag-container\">\r\n\r\n        <select onChange={onChangeHandler}>\r\n            <option value=\"\">Select a country</option>\r\n            <option value=\"argentina\">Argentina</option>\r\n            <option value=\"brazil\">Brazil</option>\r\n            <option value=\"colombia\">Colombia</option>\r\n            <option value=\"chile\">Chile</option>\r\n            <option value=\"mexico\">México</option>\r\n            <option value=\"usa\">United States</option>\r\n            <option value=\"venezuela\">Venezuela</option>\r\n        </select>\r\n\r\n        {\r\n            flagURL\r\n            ?\r\n            <div className=\"flag_and_name-container\">\r\n                <img src={flagURL} alt={`${country} flag`} width=\"300\"/>\r\n                <p>{country}</p>\r\n            </div>\r\n            :\r\n            <h2>Please select a country first</h2>\r\n        }\r\n    </div>\r\n\r\n);\r\n\r\nexport default SelectFlag;","import React, { Component } from 'react';\r\nimport Loader from '../../../../components/commons/Loader/loader';\r\nimport SelectFlag from '../components/flag';\r\n \r\n\r\nclass ShowCountry extends Component{\r\n\r\n    state = {\r\n        country: '',\r\n        flagURL: '',\r\n        loading: false,\r\n        error: ''        \r\n    }\r\n\r\n    // onChange handler to get the selected value\r\n    onChangeHandler = ({target: {value} }) => value ? this.getCountryData(value) : null;\r\n\r\n\r\n    // call API\r\n    async getCountryData(countryName){\r\n        this.setState({error: null, loading: true});\r\n\r\n        try {\r\n            const response = await fetch(`https://restcountries.eu/rest/v2/name/${countryName}`);\r\n            const data = await response.json();\r\n\r\n            const { name, flag } = data[0];\r\n\r\n            // *******************************\r\n            // very important!, if you can save the data to the principal form\r\n            // and get it in a json, please use the store prop\r\n            // if this component is just to render something, this is not necessary\r\n            const myComponent = 'FlagsComponent';\r\n            this.props.storedata[myComponent] = {\r\n                country: name,\r\n                flagURL: flag\r\n            };\r\n            // ******************************\r\n\r\n            // then update state\r\n            this.setState({\r\n                loading: false,\r\n                country: name,\r\n                flagURL: flag\r\n            });\r\n\r\n        } catch ({message}) {\r\n            this.setState({error: message})\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        const { country, flagURL, loading, error } = this.state;\r\n\r\n        if(loading) return <Loader />\r\n\r\n        if(error) return <h1>{error}</h1>\r\n\r\n        return <SelectFlag {...{country, flagURL}} onChangeHandler={this.onChangeHandler} />\r\n    }\r\n\r\n}\r\n\r\nexport default ShowCountry;","import React, { useState } from 'react';\r\nimport PhoneInput from 'react-phone-number-input';\r\nimport 'react-phone-number-input/style.css';\r\nimport './style.css';\r\n\r\nfunction PhoneCountry({storedata}) {\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n    const handleChange = value => {\r\n        if(value){\r\n            // save to global form\r\n            storedata['PhoneCountry'] = value;\r\n            setPhoneNumber(value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"phone-country-container\">\r\n            <h1 className=\"subtitle-2\">Put your phone number</h1>\r\n            <PhoneInput\r\n            international\r\n            defaultCountry=\"VE\"\r\n            value={phoneNumber}\r\n            onChange={handleChange}/>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default PhoneCountry;","// introduction demo structure\r\nimport React from 'react';\r\n// sub component\r\nimport ShowFlags from '../componentsUse/ShowFlags/containers/showFlag';\r\nimport PhoneCountry from '../componentsUse/PhoneCountry/phoneCountry';\r\n\r\n\r\nconst structure = [\r\n    // principal select 1\r\n    {\r\n        elementType: 'select',\r\n        name: 'first-pricipal-select',\r\n        label: \"Hi, I'm a pricipal select\",\r\n        options: [\r\n            {\r\n                value: 'normal-first-option', text: \"I'm a normal option\"\r\n            },\r\n            {\r\n                value: 'first-sub-select-trigger',\r\n                text: \"Hey select me!!!\",\r\n                makeVisible: [\r\n                    {\r\n                        elementType: 'select',\r\n                        name: 'a-sub-select1',\r\n                        label: 'Wow!, look it this, a sub select',\r\n                        options: [\r\n                            { value: 'subselect-normal-option1', text: 'normal option'},\r\n                            { value: 'subselect-normal-option2', text: 'another normal option'}\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n\r\n        ]\r\n    },\r\n\r\n    // principal select 2\r\n    {\r\n        elementType: 'select',\r\n        name: 'second-pricipal-select',\r\n        label: \"You can render components. I'm also a principal select\", // (optional)\r\n        options: [\r\n            { \r\n                value: 'to-flags-component',\r\n                text: 'Render a Component!',\r\n                makeVisible: [\r\n                    {\r\n                        elementType: 'component',\r\n                        name: 'flags-component1',\r\n                        component: <ShowFlags />\r\n                    }\r\n                ]\r\n            },\r\n            { \r\n                value: 'to-phone-component',\r\n                text: 'Render another Component!',\r\n                makeVisible: [\r\n                    {\r\n                        elementType: 'component',\r\n                        name: 'phone-component1',\r\n                        component: <PhoneCountry />\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \r\n    // principal select 3\r\n    {\r\n        elementType: 'select',\r\n        name: 'very-nested-selects',\r\n        label: \"And this select has many nested selects. I'm a principal select too\",\r\n        options: [\r\n            {\r\n                value: 'sub-select',\r\n                text: 'Select me and see all my sub components!',\r\n                makeVisible: [\r\n                    // multiple sub components rendered at once\r\n                    {\r\n                        elementType: 'component',\r\n                        name: 'title',\r\n                        component: <p className=\"subtitle-v2\">You can show more than one component at a time</p>\r\n                    },\r\n                    {\r\n                        elementType: 'component',\r\n                        name: 'flags-component2',\r\n                        component: <ShowFlags />\r\n                    },\r\n                    {\r\n                        elementType: 'component',\r\n                        name: 'phone-component2',\r\n                        component: <PhoneCountry />\r\n                    },\r\n                    {\r\n                        elementType: 'select',\r\n                        name: 'a-sub-select2',\r\n                        label: 'more nested!!',\r\n                        options: [\r\n                            { value: 'subselect-normal-option1', text: 'normal option'},\r\n                            { \r\n                                value: 'nested1', \r\n                                text: 'this will show two more <select>',\r\n                                makeVisible: [\r\n                                    {\r\n                                        elementType: 'select',\r\n                                        name: 'nested1',\r\n                                        label: 'select for more nested',\r\n                                        options: [\r\n                                            { value: 'very-nested-option1', text: 'normal option 1'},\r\n                                            { value: 'very-nested-option2', text: 'normal option 2'},\r\n                                            { \r\n                                                value: 'very-nested-option3', \r\n                                                text: 'Oh yeah, select me',\r\n                                                makeVisible: [\r\n                                                    {\r\n                                                        elementType: 'component',\r\n                                                        name: 'message',\r\n                                                        component: <p className=\"subtitle-v2\">Well, I think you got the point</p>\r\n                                                    }\r\n                                                ]\r\n                                            },\r\n                                            { value: 'very-nested-option4', text: 'normal option 4'},\r\n                                        ] \r\n                                    },\r\n\r\n                                    {\r\n                                        // a <select> with custom onChange\r\n                                        elementType: 'select',\r\n                                        name: 'customOnChange-select',\r\n                                        label: 'this select has a customOnChange',\r\n                                        options: [\r\n                                            { value: 'customOnChange-option1', text: 'alert the screen width'},\r\n                                            { value: 'customOnChange-option2', text: 'insert a component'},\r\n                                        ],\r\n                                        // customOnChange: (value, store, insertElement) => {\r\n                                        customchange: (value, insertElement) => {\r\n                                            \r\n                                            if(value === 'customOnChange-option1'){\r\n                                                const screenWidth = document.body.offsetWidth;\r\n                                                alert('document.body width is: ' + screenWidth + 'px');\r\n                                            }\r\n                                            // insert a element\r\n                                            else if(value === 'customOnChange-option2'){\r\n                                                const MyComponent = <PhoneCountry />;\r\n                                                const selectName = 'customOnChange-select'; // normally it is this same <select> name\r\n                                                insertElement(selectName, MyComponent);\r\n                                            }\r\n                                        \r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n\r\n                ]\r\n            },\r\n\r\n            { value: 'normal-option-select3', text: 'normal option' }\r\n\r\n        ]\r\n    }\r\n\r\n]\r\n\r\nexport default structure;","import React, { useState } from 'react';\r\nimport {NestedSelects} from 'nested-selects-react';\r\n// structure ***** very important *****\r\nimport mySelectsStructure from './intro-structure'; \r\n\r\n// storedata for NestedSelects\r\n// ******* very important if you want get the value of inputs inside NestedSelects *******\r\n// const storedata = {};\r\n// ***************************************************************************************\r\n\r\nfunction IntroForm() {\r\n\r\n    const [state, setState] = useState({\r\n        nestedSelectsValues: {},\r\n    });\r\n\r\n    const handleInputChange = ({target: { value, name }}) => setState({...state, [name]: value});\r\n\r\n    const getAllFormData = () => {\r\n        const allData = {\r\n            ...state\r\n        } \r\n        console.clear();\r\n        console.log('form inputs and nested-selects-react values: \\n',allData);\r\n        alert(\"Look the console\");\r\n    }\r\n    \r\n    // get the <NestedSelects/> values\r\n    const getvalues = data => setState({\r\n        ...state,\r\n        nestedSelectsValues: {...data},\r\n    });\r\n\r\n    \r\n    return(\r\n        <div className=\"intro-form-container\">\r\n            <div className=\"columns is-centered\">\r\n                <form className=\"column card is-10\" onSubmit={() => false}>\r\n                    \r\n                    <div className=\"card-header-title\">\r\n                        <h1 className=\"title\">Form Demo:</h1>\r\n                    </div>\r\n\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">Username</label>\r\n                        <div className=\"control\">\r\n                            <input onChange={handleInputChange} name=\"username\" className=\"input\" type=\"text\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">Email</label>\r\n                        <div className=\"control\">\r\n                            <input onChange={handleInputChange} name=\"email\" className=\"input\" type=\"email\" />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <h2 className=\"subtitle-v2\">nested-select-react example:</h2>\r\n                    {/* NestedSelects use */}\r\n                    <div className=\"field\">\r\n                        <NestedSelects selects={mySelectsStructure} getvalues={getvalues} />\r\n                    </div>\r\n\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">Comments</label>\r\n                        <textarea onChange={handleInputChange} className=\"textarea\" name=\"textarea\" cols=\"20\" rows=\"3\"></textarea>\r\n                    </div>\r\n\r\n                    <div className=\"buttons is-centered\">\r\n                        <button onClick={getAllFormData} type=\"button\" className=\"button btn-custom\">Get Form Data</button>\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IntroForm;","import React from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nfunction PortalModal({children, showPortal}){\r\n    \r\n    if(showPortal){\r\n        return(\r\n            createPortal(\r\n                <div className=\"portal-container\">\r\n                    {children}\r\n                </div>,\r\n                document.getElementById('portalModal')\r\n            )\r\n        )\r\n    }\r\n    \r\n    return null;\r\n}\r\n\r\nexport default PortalModal;","import React, { useState } from 'react';\r\nimport Modal from '../Portal/portal';\r\n\r\n\r\nfunction ClibBoard({ text }) {\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const copyToClipboard = codeTxt => {\r\n        navigator.clipboard.writeText(codeTxt);\r\n        setShowModal(true);\r\n        closeClipboardMessage();\r\n    }\r\n    \r\n    const closeClipboardMessage = () => setTimeout(() => {\r\n        setShowModal(false);\r\n    }, 1750);\r\n\r\n\r\n    return (\r\n        <div className=\"clipboard-container\">\r\n            <div onClick={() => copyToClipboard(text)} className=\"copy-icon\">copy</div>\r\n            \r\n            \r\n            <Modal showPortal={showModal}>\r\n                <div className=\"copied-message-container\">\r\n                    <div className=\"copied-message\">\r\n                        Copied to clipboard!\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default ClibBoard;","import React, { useEffect } from 'react';\r\nimport Prism from 'prismjs';\r\nimport ClipBoard from '../ClipBoard/clipBoard';\r\n// styles\r\nimport '../../../globalStyles/prism.css';\r\nrequire('prismjs/components/prism-jsx'); // auto run\r\n\r\nfunction ExampleCode({ codeText, lang = 'jsx' }) {\r\n\r\n    // to highlight the code\r\n    useEffect(() => {\r\n        Prism.highlightAll(false);\r\n    },[]);\r\n\r\n\r\n    return(\r\n        <pre>\r\n            <ClipBoard text={codeText} />\r\n            <code className={`language-${lang}`} >{codeText}</code>\r\n        </pre>\r\n    )\r\n    \r\n}\r\n\r\nexport default ExampleCode;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport IntroForm from './intro-form';\r\nimport ExampleCode from '../../components/commons/ExampleCode/exampleCode';\r\n\r\n\r\nfunction Introduction(){\r\n\r\n    return(\r\n        <div className=\"columns direction-column\">\r\n            <div className=\"has-text-centered column\">\r\n                <h1 className=\"title\">nested-select-react</h1>\r\n                <h2 className=\"subtitle\">Un componente react que te ayuda a manejar multiples {'<select>'} anidados</h2>\r\n            </div>\r\n\r\n            <div className=\"column\">\r\n                <IntroForm />\r\n            </div>\r\n\r\n            <div className=\"card column \">\r\n                <h2 className=\"subtitle\">Instalación:</h2>\r\n                <div className=\"npm-and-yarn\">\r\n                    <p>npm</p>\r\n                    <ExampleCode codeText={'npm i nested-selects-react'}/>\r\n                    <p>yarn</p>\r\n                    <ExampleCode codeText={'yarn add nested-selects-react'}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card column\">\r\n                <div className=\"card-content\">\r\n                    <div className=\"title has-text-centered\">Empieza a usarlo!</div>\r\n                    <div className=\"buttons is-centered\">\r\n                        <Link to=\"/get-started\" className=\"button btn-custom\">get started</Link>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Introduction;","import React, { useState } from 'react';\r\nimport { NestedSelects, Select, Option, MakeVisible } from 'nested-selects-react';\r\n\r\n\r\n// ***************************** WITH THE API ***********************************\r\n// ============== create the <selects> structure ================\r\n// const struct = new Structure();\r\n// // ***** principal selects *****\r\n// const select1 = struct.makeElement('select', { name: 'first-select', label: 'first select' })\r\n// const select1Options = struct.makeElement('options', {\r\n//     optionsArray: [\r\n//         { value: 'sel1-option1', text: 'option 1' },\r\n//         { value: 'sel1-option2', text: 'option 2' }\r\n//     ]\r\n// });\r\n\r\n// const select2 = struct.makeElement('select', { name: 'second-select', label: 'second select' })\r\n// const select2Options = struct.makeElement('options', {\r\n//     optionsArray: [\r\n//         { value: 'sel2-option1', text: 'option 1' },\r\n//         { value: 'sel2-option2', text: 'sel2 option 2 trigger' }\r\n//     ]\r\n// });\r\n// // ***** sub selects *****\r\n// const subSelect = struct.makeElement('select', { name: 'sub-select', label: 'Wow! check this out, a sub select!'});\r\n// const subSelectOptions = struct.makeElement('options', {\r\n//     optionsArray: [\r\n//         { value: 'sub-sel1-option1', text: 'sub option 1' },\r\n//         { value: 'sub-sel1-option2', text: 'sub option 2' }\r\n//     ]\r\n// });\r\n\r\n// // ======== add options to selects ========\r\n// struct.addOptionsToSelect(select1, select1Options);\r\n// struct.addOptionsToSelect(select2, select2Options);\r\n// struct.addOptionsToSelect(subSelect, subSelectOptions);\r\n\r\n// // ========== link trigger options with sub elements ==========\r\n// struct.linkElementWithTriggerOption(subSelect, 'sel2-option2');\r\n\r\n// // ========== save elements ==========\r\n// const theStruct = struct.savePrincipalSelects(select1, select2);\r\n\r\n\r\n// // ***************************** HANDMADE ***********************************\r\n// const myStructureHandMade = [\r\n//     // first principal <select>\r\n//     {\r\n//         elementType: 'select',\r\n//         name: 'first-select',\r\n//         label: 'first select',\r\n//         options: [\r\n//             { value: 'sel1-option1', text: 'option 1' },\r\n//             { value: 'sel1-option2', text: 'option 2' }\r\n//         ]\r\n//     },\r\n//     // second principal <select>\r\n//     {\r\n//         elementType: 'select',\r\n//         name: 'second-select',\r\n//         label: 'second select',\r\n//         options: [\r\n//             { value: 'sel2-option1', text: 'option 1' },\r\n//             // trigger option\r\n//             { value: 'sel2-option2', text: 'sel2 option 2 trigger',\r\n//                 makeVisible: [\r\n//                     {    \r\n//                         elementType: 'select',\r\n//                         name: 'sub-select',\r\n//                         label: 'Wow! check this out, a sub select!',\r\n//                         options: [\r\n//                             { value: 'sub-sel1-option1', text: 'option 1' },\r\n//                             { value: 'sub-sel1-option2', text: 'option 2' }\r\n//                         ]   \r\n//                     }\r\n//                 ]\r\n//             }\r\n//         ]\r\n//     }\r\n// ]\r\n\r\n// ***************************** WITH THE COMPONENTS ***********************************\r\n// const myStructureComponents = [\r\n//     <Select name=\"first-select\" label=\"first select\">\r\n//         <Option value=\"sel1-option1\">sel1 option 1</Option>\r\n//         <Option value=\"sel1-option2\">sel1 option 2</Option>\r\n//     </Select>\r\n// ,\r\n//     <Select name=\"second-select\" label=\"first select\">\r\n//         <Option value=\"sel2-option1\">sel2 option 1</Option>\r\n//         {/* trigger option */}\r\n//         <Option value=\"sel2-option2\">\r\n//             sel2 option 2 trigger\r\n//             <MakeVisible>\r\n//                 <Select name=\"sub-select\" label=\"Wow! check this out, a sub select!\">\r\n//                     <Option value=\"sub-sel-option1\">option 1</Option>\r\n//                     <Option value=\"sub-sel-option1\">option 2</Option>\r\n//                 </Select>\r\n//             </MakeVisible>    \r\n//         </Option>\r\n//     </Select>\r\n// ]\r\n\r\n\r\nfunction MyForm(){\r\n    const [ state, setState ] = useState({ \r\n        nestedSelectsValues: null \r\n    });\r\n\r\n    // to get the selects data\r\n    const getValues = data => setState({ ...state, nestedSelectsValues: data });\r\n\r\n    const handleSubmit = ev => {\r\n        ev.preventDefault();\r\n        console.clear();\r\n        console.log(\"NestedSelects values\", state);\r\n        alert(\"look the console\")\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={() => false}>\r\n            <NestedSelects getvalues={getValues}>\r\n\r\n                <Select name=\"first-select\" label=\"first select\">\r\n                    <Option value=\"sel1-option1\">sel1 option 1</Option>\r\n                    <Option value=\"sel1-option2\">sel1 option 2</Option>\r\n                </Select>\r\n\r\n                <Select name=\"second-select\" label=\"second select\">\r\n                    <Option value=\"sel2-option1\">sel2 option 1</Option>\r\n                    {/* trigger option */}\r\n                    <Option value=\"sel2-option2\">\r\n                        sel2 option 2 trigger\r\n                        <MakeVisible>\r\n                            <Select name=\"sub-select\" label=\"Wow! check this out, a sub select!\">\r\n                                <Option value=\"sub-sel-option1\">option 1</Option>\r\n                                <Option value=\"sub-sel-option1\">option 2</Option>\r\n                            </Select>\r\n                        </MakeVisible>    \r\n                    </Option>\r\n                </Select>\r\n\r\n            </NestedSelects>\r\n            <button type=\"button\" className=\"button btn-custom\" onClick={handleSubmit}>save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MyForm;","// examples in string to show the code and copy it\r\n\r\n// ========================== get started example ============================\r\nconst npmInstall = \"npm i nested-selects-react\";\r\nconst yarnInstall = \"yarn add nested-selects-react\";\r\n\r\n\r\nconst getStartedExampleCode = (\r\n`\r\nimport React, { useState } from 'react';\r\nimport { NestedSelects, Select, Option, MakeVisible } from 'nested-selects-react';\r\n\r\n\r\nfunction MyForm(){\r\n    const [ state, setState ] = useState({ \r\n        nestedSelectsValues: null \r\n    });\r\n    // to get the <Select>'s data\r\n    const getValues = data => setState({ ...state, nestedSelectsValues: data });\r\n\r\n    const handleSubmit = ev => {\r\n        ev.preventDefault();\r\n        console.log(state);\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={() => false}>\r\n            {/* nested-selects-react code */}\r\n            <NestedSelects getvalues={getValues}>\r\n                {/* first principal select */}\r\n                <Select name=\"first-select\" label=\"first select\">\r\n                    <Option value=\"sel1-option1\">sel1 option 1</Option>\r\n                    <Option value=\"sel1-option2\">sel1 option 2</Option>\r\n                </Select>\r\n                {/* second principal select */}\r\n                <Select name=\"second-select\" label=\"second select\">\r\n                    <Option value=\"sel2-option1\">sel2 option 1</Option>\r\n                    {/* trigger option */}\r\n                    <Option value=\"sel2-option2\">\r\n                        sel2 option 2 trigger\r\n                        <MakeVisible>\r\n                            <Select name=\"sub-select\" label=\"Wow! check this out, a sub select!\">\r\n                                <Option value=\"sub-sel-option1\">option 1</Option>\r\n                                <Option value=\"sub-sel-option1\">option 2</Option>\r\n                            </Select>\r\n                        </MakeVisible>    \r\n                    </Option>\r\n                </Select>\r\n            </NestedSelects>\r\n            <button type=\"button\" onClick={handleSubmit}>save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MyForm;\r\n`\r\n);\r\n\r\n// =========================== making structure page ==============================\r\nconst makingStructureExampleCode = {\r\n    NestedSelects:\r\n`<NestedSelects getvalues={(values) => console.log(values) } >\r\n    {...}\r\n</NestedSelects>\r\n`,\r\n\r\n    Select:\r\n`<Select name=\"mySelect\"  id=\"mySelect\"  label=\"this is mySelect\">\r\n    {...}\r\n</Select>\r\n`,\r\n\r\n    Option:\r\n`<Option value=\"opt-value\">option text</Option>`,\r\n\r\n    MakeVisible:\r\n`\r\n{/* this option will trigger all components inside <MakeVisible> */}\r\n<Option value=\"opt-value\">\r\n    option text\r\n    <MakeVisible>\r\n        {/* component */}\r\n        {/* component */}\r\n        {/* component */}\r\n        ...\r\n    </MakeVisible>\r\n</Option>\r\n`,\r\n\r\n    fullExample:\r\n`\r\nimport React, { useState } from 'react';\r\nimport { NestedSelects, Select, Option, MakeVisible } from 'nested-selects-react';\r\n\r\n\r\nfunction MySubSelects() {\r\n\r\n    const [state, setState] = useState({});\r\n\r\n    const handleValues = data => {\r\n        console.log(\"the nestedSelectsValues:\", state);\r\n\r\n        setState({\r\n            ...state,\r\n            nestedSelectsValues: {...data}\r\n        })\r\n    }\r\n\r\n    return(\r\n        <NestedSelects getvalues={handleValues} >\r\n    \r\n            {/* without nested */}\r\n            <Select name=\"mySelect1\" id=\"mySelect1\" label=\"this is mySelect1\">\r\n                <Option value=\"opt-value1\">option text 1</Option>\r\n                <Option value=\"opt-value2\">option text 2</Option>\r\n            </Select>\r\n\r\n            {/* with just one nested <Select> */}\r\n            <Select name=\"mySelect2\" id=\"mySelect2\" label=\"this is mySelect2\">\r\n                <Option value=\"opt-value1\">option text 1</Option>\r\n                <Option value=\"opt-value2\">\r\n                    option 2 trigger\r\n                    <MakeVisible>\r\n                        <Select name=\"mySelect2-nested\" label=\"nested select!\">\r\n                            <Option value=\"opt1\">opt 1</Option>\r\n                            <Option value=\"opt2\">opt 2</Option>\r\n                        </Select>\r\n                    </MakeVisible>\r\n                </Option>\r\n            </Select>\r\n\r\n        </NestedSelects>\r\n\r\n    )\r\n}\r\n`\r\n}\r\n\r\n\r\n// ==================== sub components page examples ==========================\r\nconst subComponentsExampleCode = {\r\n    threeNestedSelects:\r\n`\r\nimport React from 'react';\r\nimport { NestedSelects, Select, Option, MakeVisible } from 'nested-selects-react';\r\n\r\n// example with 3 nested sub <Select>\r\nfunction ThreeNestedSelects() {\r\n    return(\r\n        <NestedSelects getvalues={ values => console.log(values)}>\r\n            {/* normal Select */}\r\n            <Select name=\"firstSelect\" label=\"first select\">\r\n                <Option value=\"opt1\">opt 1</Option>\r\n                <Option value=\"opt2\">opt 2</Option>\r\n            </Select>\r\n            {/* father of 3 sub <Select> */}\r\n            <Select name=\"fatherSubSelects\" label=\"father of three sub <Select>\">\r\n                <Option value=\"opt1\">\r\n                    opt1 hey select me!!\r\n                    <MakeVisible>\r\n                        {/* nested 1 */}\r\n                        <Select name=\"nested-1\" label=\"nested 1\">\r\n                            <Option value=\"opt1\">\r\n                                opt1 select me again!!\r\n                                <MakeVisible>\r\n                                    {/* nested 2 */}\r\n                                    <Select name=\"nested-2\" label=\"nested 2\">\r\n                                        <Option value=\"opt1\">opt1</Option>\r\n                                        <Option value=\"opt2\">\r\n                                            opt2 and this will show nested 3\r\n                                            <MakeVisible>\r\n                                                {/* nested 3 */}\r\n                                                <Select name=\"nested-3\" label=\"nested 3, the last.\">\r\n                                                    <Option value=\"opt1\">opt1</Option>\r\n                                                    <Option value=\"opt2\">opt2</Option>\r\n                                                </Select>\r\n                                            </MakeVisible>\r\n                                        </Option>\r\n                                    </Select>\r\n                                </MakeVisible>\r\n                            </Option>\r\n                            <Option value=\"opt2\">\r\n                                normal option\r\n                            </Option>\r\n                        </Select>\r\n                    </MakeVisible>\r\n                </Option>\r\n                <Option value=\"opt2\">\r\n                    normal option\r\n                </Option>\r\n            </Select>\r\n        </NestedSelects> \r\n    )\r\n}\r\n\r\n`,\r\n\r\n    subComponentsInsideMakeVisible:\r\n`\r\nimport React from 'react';\r\nimport { NestedSelects, Select, Option, MakeVisible } from 'nested-selects-react';\r\n// === change this with your custom or customs components ===\r\nimport FlagsComponent from './ShowFlags/containers/showFlag';\r\n// ==============================================\r\n\r\n\r\nfunction SubComponents(){\r\n    const log = data => console.log('NestedSelects values: ', data);\r\n\r\n    return( \r\n        <NestedSelects getvalues={log}>\r\n            {/* normal <Select> */}\r\n            <Select name=\"mySelect\" label=\"mySelect\">\r\n                <Option value=\"opt1\">option 1</Option>\r\n                <Option value=\"opt2\">option 2</Option>\r\n            </Select>\r\n\r\n            {/* <Select with sub components> */}\r\n            <Select name=\"mySelect2\" label=\"mySelect2\">\r\n                <Option value=\"opt1\">opt1</Option>\r\n                <Option value=\"opt2\">\r\n                    show various components\r\n                    <MakeVisible>\r\n\r\n                        {/* react tags */}\r\n                        <h1 className=\"title\">Hi I'm a h1</h1>\r\n\r\n                        {/* components, put here yours React components!!!*/}\r\n                        <FlagsComponent />\r\n\r\n                        {/* if you want a sub-select, you can put it also */}\r\n                        <Select name=\"subSel\" label=\"sub select showed with other components\">\r\n                            <Option value=\"opt1\">option 1</Option>\r\n                            <Option value=\"opt2\">option 2</Option>\r\n                        </Select>\r\n\r\n                    </MakeVisible>\r\n                </Option>\r\n            </Select>\r\n        </NestedSelects>\r\n    )\r\n}\r\n`\r\n}\r\n\r\nconst customOnChangeExampleCode = {\r\ncustomChangeValue: \r\n`\r\nfunction CustomChangeValue(){\r\n\r\n    const handleCustomChange = (value) => {\r\n        // here your logic\r\n        if(value === \"opt1\") console.log(\"is first option\");\r\n        else if(value === \"opt2\") console.log(\"is second option\");\r\n        else console.log(\"is default option\");\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <NestedSelects getvalues={() => {}}>\r\n                <Select \r\n                    customchange={handleCustomChange} \r\n                    name=\"select1\" \r\n                    label=\"select and see the console\" \r\n                > \r\n                    <Option value=\"opt1\">option 1</Option>\r\n                    <Option value=\"opt2\">otra opcion</Option>\r\n                </Select>\r\n            </NestedSelects>\r\n        </div>\r\n    )\r\n}\r\n`,\r\nhandlerChangeInsert: \r\n`\r\n// insert an element asynchronously\r\nconst handleChangeInsert = async (value, insertElement ) => {\r\n    // here your logic\r\n    if(value === \"opt2\"){\r\n        try {\r\n            const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n            const data = await response.json();\r\n            // insert element with data\r\n            insertElement(\"select1\", <MiniList data={data} />)\r\n        } catch ({message}) {\r\n            console.log(message);\r\n        }\r\n    }\r\n}\r\n`,\r\n\r\ncustomChangeInsert:\r\n`\r\nfunction MiniList({data}){\r\n    return (\r\n        <ul>\r\n            {data.map(({id, name}) => <li key={id}>{name}</li>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nfunction CustomChangeInsert(){\r\n    // insert an element asynchronously\r\n    const handleChangeInsert = async (value, insertElement ) => {\r\n        // here your logic\r\n        if(value === \"opt1\"){\r\n            try {\r\n                const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n                const data = await response.json();\r\n                // insert element with data\r\n                insertElement(\"select1\", <MiniList data={data} />)\r\n            } catch ({message}) {\r\n                console.log(message);\r\n            }\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <NestedSelects getvalues={() => {}}>\r\n                <Select \r\n                    customchange={handleChangeInsert} \r\n                    name=\"select1\" \r\n                    label=\"select and see the console\" \r\n                > \r\n                    <Option value=\"opt1\">normal option</Option>\r\n                    <Option value=\"opt2\">insert an element asynchronously</Option>\r\n                </Select>\r\n            </NestedSelects>\r\n\r\n        </div>\r\n    )\r\n}\r\n`,\r\n\r\nfullyIndependentAsyncComponent:\r\n`\r\n// fully independent functional component\r\nfunction MiniListImproved(){\r\n    const [loading, setLoading] = useState(true);\r\n    const [users, setUsers] = useState([]);\r\n\r\n    const getUsers = async () => {\r\n        try {\r\n            const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n            const usersArr = await response.json();\r\n            setUsers(usersArr);\r\n            setLoading(false);\r\n\r\n        } catch ({message}) {\r\n            console.log(message);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUsers();\r\n    }, []);\r\n\r\n    return (\r\n        loading\r\n        ?\r\n        <p>Loading</p>\r\n        :\r\n        <ul>\r\n            {users.map(({id, name}) => <li key={id}>{name}</li>)}\r\n        </ul>    \r\n    ) \r\n}\r\n\r\n// nested-selects-react\r\nfunction CustomChangeInsertImproved(){\r\n    return(\r\n        <div className=\"container\">\r\n            <NestedSelects getvalues={() => {}}>\r\n                <Select  name=\"select1\" label=\"with <MakeVisible>\"> \r\n                    <Option value=\"opt1\">normal option</Option>\r\n                    <Option value=\"opt2\">\r\n                        insert element with MakeVisible\r\n                        <MakeVisible>\r\n                            <MiniListImproved />\r\n                        </MakeVisible>\r\n                    </Option>\r\n                </Select>\r\n            </NestedSelects>\r\n        </div>\r\n    )\r\n}\r\n`\r\n\r\n}\r\n\r\n\r\n\r\nexport {\r\n    npmInstall,\r\n    yarnInstall,\r\n    getStartedExampleCode, \r\n    makingStructureExampleCode,\r\n    subComponentsExampleCode,\r\n    customOnChangeExampleCode\r\n}\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MyForm from './example';\r\nimport ExampleCode from '../../components/commons/ExampleCode/exampleCode';\r\n// text string code examples\r\nimport { npmInstall, yarnInstall, getStartedExampleCode } from '../exampleInText/allExamplesInText';\r\n\r\n\r\nfunction GetStarted(){\r\n\r\n    return(\r\n        <div className=\"columns is-centered is-multiline\">\r\n            \r\n            <div className=\"column is-10\">\r\n                <div>\r\n                    <h1 className=\"title has-text-centered\">Empieza a usarlo</h1>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card column is-10\">\r\n                <h2 className=\"subtitle\">Instalación:</h2>\r\n                <div className=\"npm-and-yarn\">\r\n                    <p>npm</p>\r\n                    <ExampleCode codeText={npmInstall} />\r\n                    <p>yarn</p>\r\n                    <ExampleCode codeText={yarnInstall} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card column is-10\">\r\n                <h2 className=\"subtitle\">Ejemplo básico, copialo y pegalo para que pruebes</h2>\r\n                <ExampleCode codeText={getStartedExampleCode} />\r\n            </div>\r\n\r\n            <div className=\"column is-10\">\r\n                <div>\r\n                    <h2 className=\"subtitle\">Si todo esta bien deberías tener lo siguiente:</h2>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"column is-10\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <MyForm/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"column is-10\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"subtitle\">¿No tienes estilos?</div>\r\n                        <div className=\"content\">\r\n                            nested-selects-react viene sin estilos, para que puedas personalizar tus\r\n                            <b>{' <select></select> '}</b>\r\n                            como quieras, revisa <Link to=\"/styles\">como poner estilos</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"column is-10\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"subtitle\">Incluir más cosas:</div>\r\n                        <div className=\"content\">\r\n                            Incluir más cosas como componentes o más {'<select>'} anidados es muy fácil,\r\n                            revisa <Link to=\"/structure\">como hacer la estructura</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GetStarted;","import React, { useState } from 'react';\r\nimport { NestedSelects, Select, Option, MakeVisible } from 'nested-selects-react';\r\nimport FlagsComponent from '../componentsUse/ShowFlags/containers/showFlag';\r\n\r\n\r\nfunction NormalUse(){\r\n    const log = data => console.log('NestedSelects values: ', data);\r\n\r\n    return(\r\n        <NestedSelects getvalues={log}>\r\n            <Select name=\"mySelect\" label=\"mySelect\">\r\n                <Option value=\"opt1\">option 1</Option>\r\n                <Option value=\"opt2\">option 2</Option>\r\n            </Select>\r\n        </NestedSelects>\r\n    )\r\n}\r\n\r\n\r\nfunction OneSubSelect() {\r\n    const log = data => console.log('NestedSelects values: ', data);\r\n\r\n    return(\r\n        <NestedSelects getvalues={log}>\r\n            <Select name=\"mySelect\" label=\"mySelect\">\r\n                <Option value=\"opt1\">option 1</Option>\r\n                <Option value=\"opt2\">\r\n                    select this for trigger sub-elements\r\n                    <MakeVisible>\r\n                        <Select name=\"myNestedSel\" label=\"myNestedSel\">\r\n                            <Option value=\"opt1-sub-sel\">option 1</Option>\r\n                            <Option value=\"opt2-sul-sel\">option 2</Option>\r\n                        </Select>\r\n                    </MakeVisible>\r\n                </Option>\r\n            </Select>\r\n        </NestedSelects>\r\n    )\r\n}\r\n\r\nfunction TwoSubSelects() {\r\n    const log = data => console.log('NestedSelects values: ', data);\r\n\r\n    return(\r\n        <NestedSelects getvalues={log}>\r\n            <Select name=\"mySelect\" label=\"mySelect\">\r\n                <Option value=\"opt1\">option 1</Option>\r\n                <Option value=\"opt2\">\r\n                    select this for trigger sub-elements\r\n                    <MakeVisible>\r\n                        <Select name=\"myNestedSel\" label=\"myNestedSel\">\r\n                            <Option value=\"opt1-sub-sel\">option 1</Option>\r\n                            <Option value=\"opt2-sul-sel\">\r\n                                select this for a more nested {'<select>'}\r\n                                <MakeVisible>\r\n                                    <Select name=\"very-nested-select\" label=\"wow, very nested\">\r\n                                        <Option value=\"opt1\">opt1</Option>\r\n                                        <Option value=\"opt2\">opt2</Option>\r\n                                    </Select>\r\n                                </MakeVisible>\r\n                            </Option>\r\n                        </Select>\r\n                    </MakeVisible>\r\n                </Option>\r\n            </Select>\r\n        </NestedSelects>\r\n    )\r\n} \r\n\r\nfunction SubComponents(){\r\n    const log = data => console.log('NestedSelects values: ', data);\r\n\r\n    return( \r\n        <NestedSelects getvalues={log}>\r\n            {/* normal <Select> */}\r\n            <Select name=\"mySelect\" label=\"mySelect\">\r\n                <Option value=\"opt1\">option 1</Option>\r\n                <Option value=\"opt2\">option 2</Option>\r\n            </Select>\r\n\r\n            {/* <Select with sub components> */}\r\n            <Select name=\"mySelect2\" label=\"mySelect2\">\r\n                <Option value=\"opt1\">opt1</Option>\r\n                <Option value=\"opt2\">\r\n                    show various components\r\n                    <MakeVisible>\r\n\r\n                        {/* react tags */}\r\n                        <h1 className=\"title\">Hi I'm a h1</h1>\r\n\r\n                        {/* components, put here yours React components!!!*/}\r\n                        <FlagsComponent />\r\n\r\n                        {/* if you want a sub-select, you can put it also */}\r\n                        <Select name=\"subSel\" label=\"sub select showed with other components\">\r\n                            <Option value=\"opt1\">option 1</Option>\r\n                            <Option value=\"opt2\">option 2</Option>\r\n                        </Select>\r\n\r\n                    </MakeVisible>\r\n                </Option>\r\n            </Select>\r\n        </NestedSelects>\r\n    )\r\n}\r\n\r\n// ultimo ejemplo con todo lo de los select en la pagina 'creando la estructura'\r\nfunction MySubSelects() {\r\n\r\n    const [state, setState] = useState({});\r\n\r\n    const handleValues = data => {\r\n        console.log(\"the nestedSelectsValues:\", state);\r\n\r\n        setState({\r\n            ...state,\r\n            nestedSelectsValues: {...data}\r\n        })\r\n    }\r\n\r\n    return(\r\n        <NestedSelects getvalues={handleValues} >\r\n    \r\n            {/* without nested */}\r\n            <Select name=\"mySelect1\" id=\"mySelect1\" label=\"this is mySelect1\">\r\n                <Option value=\"opt-value1\">option text 1</Option>\r\n                <Option value=\"opt-value2\">option text 2</Option>\r\n            </Select>\r\n\r\n            {/* with just one nested <Select> */}\r\n            <Select name=\"mySelect2\" id=\"mySelect2\" label=\"this is mySelect2\">\r\n                <Option value=\"opt-value1\">option text 1</Option>\r\n                <Option value=\"opt-value2\">\r\n                    option 2 trigger\r\n                    <MakeVisible>\r\n                        <Select name=\"mySelect2-nested\" label=\"nested select!\">\r\n                            <Option value=\"opt1\">opt 1</Option>\r\n                            <Option value=\"opt2\">opt 2</Option>\r\n                        </Select>\r\n                    </MakeVisible>\r\n                </Option>\r\n            </Select>\r\n\r\n        </NestedSelects>\r\n\r\n    )\r\n}\r\n\r\nexport {\r\n    NormalUse,\r\n    OneSubSelect,\r\n    TwoSubSelects,\r\n    SubComponents,\r\n    MySubSelects\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction GoToStylesPages() {\r\n    return(\r\n        <div className=\"card\">\r\n            <div className=\"card-content\">\r\n                <h1 className=\"subtitle\">¿No tienes estilos?</h1>\r\n                <div className=\"content\">nested-selects-react viene sin estilos, ¿por qué?, es para que puedas personalizarlo como desees.</div>\r\n                <div className=\"content\">Ve a la <Link to=\"/styles\">página de estilos</Link> para aprender más.</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GoToStylesPages;","import React from 'react';\r\nimport ExampleCode from '../../components/commons/ExampleCode/exampleCode';\r\nimport { makingStructureExampleCode } from '../exampleInText/allExamplesInText';\r\nimport { MySubSelects } from './shortExamples';\r\nimport { Link } from 'react-router-dom';\r\nimport GoToStylePage from '../../components/commons/GoToStylePage/goToStylePage';\r\n\r\n \r\nfunction MakingStructure() { \r\n\r\n    // simple code text example\r\n    const { Select, Option, MakeVisible, NestedSelects, fullExample } = makingStructureExampleCode; \r\n\r\n    return(\r\n        <div className=\"making-structure-container columns direction-column\">\r\n            <div className=\"column\">\r\n                <h1 className=\"title has-text-centered\">Creando la estructura</h1>\r\n                <h2 className=\"subtitle has-text-centered\">Conoce como funciona nested-selects-react</h2>\r\n            </div>\r\n\r\n            <div className=\"column\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <p className=\"content\">\r\n                            Es muy fácil usar nested-selects-react, es muy parecido a usar HTML de toda la vida, \r\n                            solo que debes tener en cuenta ciertos componentes y la manera de estructurarlos. \r\n                            <br/>\r\n                            <b>nested-selects-react tiene 4 componentes principales:</b>\r\n                        </p>\r\n                        <ul className=\"list\">\r\n                            <li className=\"list-item\"><b><Link to=\"/structure#NestedSelects\">NestedSelects</Link></b></li>\r\n                            <li className=\"list-item\"><b><Link to=\"/structure#Select\">Select</Link></b></li>\r\n                            <li className=\"list-item\"><b><Link to=\"/structure#Option\">Option</Link></b></li>\r\n                            <li className=\"list-item\"><b><Link to=\"/structure#MakeVisible\">MakeVisible</Link></b></li>\r\n                        </ul> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"column\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        {/* NestedSelects */}\r\n                        <div className=\"container\">\r\n                            <h2 className=\"subtitle-v3\" id=\"NestedSelects\">NestedSelects</h2>\r\n                            <p className=\"content\">Es el contenedor que tendrá todos los {'<Select>'} dentro de él.\r\n                                <br/>Requiere un <b>callback</b> para poder traer los valores de todos los {'<Select>'} y componentes dentro de NestedSelects.\r\n                                <br/>Dicho callback se le pasa como una prop llamada <b>getvalues</b>\r\n                            </p>\r\n                            <ExampleCode codeText={NestedSelects} />\r\n                        </div>\r\n\r\n                        {/* Select */}\r\n                        <div className=\"container\">\r\n                            <h2 className=\"subtitle-v3\" id=\"Select\">Select</h2>\r\n                            <p className=\"content\">Es parecido a un {'<select>'} normal de HTML.\r\n                                <br/>Requiere obligatoriamente la propiedad <b>name</b> ó <b>id</b>\r\n                            </p>\r\n                            <ExampleCode codeText={Select} />\r\n                        </div>\r\n\r\n                        {/* Option */}\r\n                        <div className=\"container\">\r\n                            <h2 className=\"subtitle-v3\" id=\"Option\">Option</h2>\r\n                            <p className=\"content\">Es parecido a  un {'<option>'} normal de HTML.\r\n                                <br/>Requiere obligatoriamente la propiedad <b>value</b>\r\n                            </p>\r\n                            <ExampleCode codeText={Option} />\r\n                        </div>\r\n\r\n                        {/* MakeVisible */}\r\n                        <div className=\"container\">\r\n                            <h2 className=\"subtitle-v3\" id=\"MakeVisible\">MakeVisible</h2>\r\n                            <p className=\"content\">Dentro de él irán todos los elementos que quieras renderizar al momento de seleccionar una opción.\r\n                                <br/>Puedes incluir uno o más elementos como por ejemplo más <b>{'<Select>'}</b> ó componentes hijos.\r\n                                <br/><b>No tiene props.</b>\r\n                                <br/><b>Debe estar dentro de una {'<Option>'}</b>\r\n                            </p>\r\n                            <ExampleCode codeText={MakeVisible} />\r\n                        </div>\r\n\r\n\r\n                        {/* full example */}\r\n                        <div className=\"container\">\r\n                            <h2 className=\"subtitle-v3\">Ejemplo con todo</h2>\r\n                            <p className=\"content\">Este ejemplo tiene 2 {'<Select>'} pricipales.\r\n                                <br/>El primer {'<Select>'} es normal, pero el segundo {'<Select>'} tiene un {'<Select>'} anidado.\r\n                            </p>\r\n                            <ExampleCode codeText={fullExample} />\r\n                            \r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"subtitle\">con el código anterior obtienes lo siguiente:</div>\r\n                                    <MySubSelects />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <GoToStylePage />\r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MakingStructure;","import React from 'react';\r\nimport { NestedSelects, Select, Option, MakeVisible } from 'nested-selects-react';\r\n// components\r\nimport FlagsComponent from './ShowFlags/containers/showFlag';\r\n// import PhoneCountry from './PhoneCountry/phoneCountry';\r\n// import MiniForm from './MiniForm/miniForm';\r\n\r\n\r\n// example with 3 nested sub <Select>\r\nfunction ThreeNestedSelects() {\r\n    return(\r\n        <NestedSelects getvalues={ values => console.log(values)}>\r\n            {/* normal Select */}\r\n            <Select name=\"firstSelect\" label=\"first select\">\r\n                <Option value=\"opt1\">opt 1</Option>\r\n                <Option value=\"opt2\">opt 2</Option>\r\n            </Select>\r\n            {/* father of 3 sub <Select> */}\r\n            <Select name=\"fatherSubSelects\" label=\"father of three sub <Select>\">\r\n                <Option value=\"opt1\">\r\n                    opt1 hey select me!!\r\n                    <MakeVisible>\r\n                        {/* nested 1 */}\r\n                        <Select name=\"nested-1\" label=\"nested 1\">\r\n                            <Option value=\"opt1\">\r\n                                opt1 select me again!!\r\n                                <MakeVisible>\r\n                                    {/* nested 2 */}\r\n                                    <Select name=\"nested-2\" label=\"nested 2\">\r\n                                        <Option value=\"opt1\">opt1</Option>\r\n                                        <Option value=\"opt2\">\r\n                                            opt2 and this will show nested 3\r\n                                            <MakeVisible>\r\n                                                {/* nested 3 */}\r\n                                                <Select name=\"nested-3\" label=\"nested 3, the last.\">\r\n                                                    <Option value=\"opt1\">opt1</Option>\r\n                                                    <Option value=\"opt2\">opt2</Option>\r\n                                                </Select>\r\n                                            </MakeVisible>\r\n                                        </Option>\r\n                                    </Select>\r\n                                </MakeVisible>\r\n                            </Option>\r\n                            <Option value=\"opt2\">\r\n                                normal option\r\n                            </Option>\r\n                        </Select>\r\n                    </MakeVisible>\r\n                </Option>\r\n                <Option value=\"opt2\">\r\n                    normal option\r\n                </Option>\r\n            </Select>\r\n        </NestedSelects>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction SubComponents(){\r\n    const log = data => console.log('NestedSelects values: ', data);\r\n\r\n    return( \r\n        <NestedSelects getvalues={log}>\r\n            {/* normal <Select> */}\r\n            <Select name=\"mySelect\" label=\"mySelect\">\r\n                <Option value=\"opt1\">option 1</Option>\r\n                <Option value=\"opt2\">option 2</Option>\r\n            </Select>\r\n\r\n            {/* <Select with sub components> */}\r\n            <Select name=\"mySelect2\" label=\"mySelect2\">\r\n                <Option value=\"opt1\">opt1</Option>\r\n                <Option value=\"opt2\">\r\n                    show various components\r\n                    <MakeVisible>\r\n\r\n                        {/* react tags */}\r\n                        <h1 className=\"title\">Hi I'm a h1</h1>\r\n\r\n                        {/* components, put here yours React components!!!*/}\r\n                        <FlagsComponent />\r\n\r\n                        {/* if you want a sub-select, you can put it also */}\r\n                        <Select name=\"subSel\" label=\"sub select showed with other components\">\r\n                            <Option value=\"opt1\">option 1</Option>\r\n                            <Option value=\"opt2\">option 2</Option>\r\n                        </Select>\r\n\r\n                    </MakeVisible>\r\n                </Option>\r\n            </Select>\r\n        </NestedSelects>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport {\r\n    ThreeNestedSelects,\r\n    SubComponents\r\n}","import React from 'react';\r\n// clipboard\r\n// import ClipBoard from '../../components/commons/ClipBoard/clipBoard';\r\n// example components\r\nimport ExampleCode from '../../components/commons/ExampleCode/exampleCode';\r\nimport {\r\n    ThreeNestedSelects,\r\n    SubComponents\r\n} from './examples';\r\n// examples in text\r\nimport { subComponentsExampleCode } from '../exampleInText/allExamplesInText';\r\n\r\n\r\nfunction SubComponentsPage() {\r\n    \r\n\r\n    return(\r\n        <div className=\"columns direction-column\">\r\n            <div className=\"column has-text-centered\">\r\n                <h1 className=\"title\">Incluyendo sub componentes</h1>\r\n                <h2 className=\"subtitle\">Aprende como incluir todo tipo de sub componentes</h2>\r\n            </div>\r\n\r\n            <div className=\"column card\">\r\n                <div className=\"card-content\">\r\n                    <p className=\"content\">\r\n                        En la siguiente sección se te muestra como incluir o mejor dicho, <b>como mostrar</b> {' '} \r\n                        sub componentes cuando se haga click sobre una determinada <b>{'<Option>'}</b>.\r\n                        Dichos componentes pueden ser uno o más {'<Select>'} ó componentes creados por ti. \r\n                        <br/>\r\n                        <br/>\r\n                        Primero empezaremos con como incluir muchos <b>{'<Select>'}</b> anidados, luego cómo incluir tantos <b>sub-componentes</b> como quieras.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* multiples selects */}\r\n            <div className=\"column card\">\r\n                <div className=\"card-content\">\r\n                    <h1 className=\"title\">Multiples {'<Select>'} anidados.</h1>\r\n                    <p className=\"content\">\r\n                        ¿Quieres saber cómo hacer que cuando le des click a una <b>{'<Option>'}</b> se muestre un sub <b>{'<Select>'}</b>?.\r\n                        &nbsp;Es muy simple, solo coloca tantos sub <b>{'<Select>'}</b> como quieras dentro de un <b>{'<MakeVisible>'}</b>.\r\n                        <br/>\r\n                        Recuerda que un <b>{'<MakeVisible>'}</b> debe estar dentro de una <b>{'<Option>'}</b>\r\n                        <br/>\r\n                        <br/>\r\n                        El siguiente ejemplo muestra un <b>{'<Select>'}</b> que tiene dentro varios sub <b>{'<Select>'}</b>.\r\n                        <br/><b>3 {'<Select>'}</b> anidados para ser exactos:\r\n                    </p>\r\n                    <ThreeNestedSelects />\r\n                </div>\r\n\r\n                <div className=\"card-content\">\r\n                    <ExampleCode codeText={subComponentsExampleCode.threeNestedSelects} />\r\n                </div>\r\n\r\n                <div className=\"card-content\">\r\n                    <div className=\"content\">\r\n                        <span style={{textDecoration: 'underline'}}>Seguro notaste que se puede complicar un poco la lectura</span>, ya que se va anidando cada vez mas dependiendo de que tantos select uses. Por ahora solo recuerda que dentro de un <b>{'<Option></Option>'}</b> puedes poner un texto y un <b>{'<MakeVisible></MakeVisible>'}</b> y dentro del MakeVisible puedes colocar cualquier componente que quieras.\r\n                        Asi que, puedes poner tantos sub elementos como lo necesites, aunque ya vez que a partir de 3 niveles de anidación la cosa no es tan facil de leer.\r\n                        <br/>\r\n                        <br/>\r\n                        No te preocupes ya que esto se ira simplificando con el tiempo, a medida que se hagan actualizaciones.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"column card\">\r\n                <div className=\"card-content\">\r\n                    <h1 className=\"title\">Sub componentes</h1>\r\n                    <p className=\"content\">\r\n                        No solo se pueden poner <b>{'<Select></Select>'}</b> dentro de un <b>{'<MakeVisible></MakeVisible>'}</b>, también se pueden colocar tantos componentes como quieras, ya sean componentes creados por ti o por alguien más.\r\n                    </p>\r\n                    <p className=\"content\">\r\n                        En el siguiente ejemplo vez como incluir un componente para mostrar es muy fácil.\r\n                    </p>\r\n\r\n                    <div className=\"card-content\">\r\n                        <SubComponents />\r\n                    </div>\r\n\r\n                    <p className=\"subtitle\">Código:</p>\r\n                    <ExampleCode codeText={subComponentsExampleCode.subComponentsInsideMakeVisible} />\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SubComponentsPage;","import React, { useState, useEffect } from \"react\";\r\nimport { Select, Option, NestedSelects, MakeVisible } from 'nested-selects-react';\r\n\r\n// ===== just catch option value ===== \r\nfunction CustomChangeValue(){\r\n    const handleCustomChange = (value) => {\r\n        // here your logic\r\n        if(value === \"opt1\") console.log(\"is first option\");\r\n        else if(value === \"opt2\") console.log(\"is second option\");\r\n        else console.log(\"is default option\");\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <NestedSelects getvalues={() => {}}>\r\n\r\n                <Select \r\n                    name=\"select1\" \r\n                    label=\"select and see the console\" \r\n                    customchange={handleCustomChange} \r\n                > \r\n                    <Option value=\"opt1\">option 1</Option>\r\n                    <Option value=\"opt2\">option 2</Option>\r\n                </Select>\r\n\r\n            </NestedSelects>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// ===== catch value and insert sub element =====\r\nfunction MiniList({data}){\r\n    return (\r\n        <ul>\r\n            {data.map(({id, name}) => <li key={id}>{name}</li>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nfunction CustomChangeInsert(){\r\n    // insert an element asynchronously\r\n    const handleChangeInsert = async (value, insertElement ) => {\r\n        // here your logic\r\n        if(value === \"opt2\"){\r\n            try {\r\n                const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n                const data = await response.json();\r\n                // insert element with data\r\n                insertElement(\"select1\", <MiniList data={data} />)\r\n            } catch ({message}) {\r\n                console.log(message);\r\n            }\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <NestedSelects getvalues={() => {}}>\r\n                <Select \r\n                    customchange={handleChangeInsert} \r\n                    name=\"select1\" \r\n                    label=\"select and see the console\" \r\n                > \r\n                    <Option value=\"opt1\">normal option</Option>\r\n                    <Option value=\"opt2\">insert an element asynchronously</Option>\r\n                </Select>\r\n            </NestedSelects>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// ===== insert element with MakeVisible =====\r\n\r\n// fully independent functional component\r\nfunction MiniListImproved(){\r\n    const [loading, setLoading] = useState(true);\r\n    const [users, setUsers] = useState([]);\r\n\r\n    const getUsers = async () => {\r\n        try {\r\n            const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n            const usersArr = await response.json();\r\n            setUsers(usersArr);\r\n            setLoading(false);\r\n\r\n        } catch ({message}) {\r\n            console.log(message);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUsers();\r\n    }, []);\r\n\r\n    return (\r\n        loading\r\n        ?\r\n        <p>Loading</p>\r\n        :\r\n        <ul>\r\n            {users.map(({id, name}) => <li key={id}>{name}</li>)}\r\n        </ul>    \r\n    ) \r\n}\r\n\r\n// nested-selects-react\r\nfunction CustomChangeInsertImproved(){\r\n    return(\r\n        <div className=\"container\">\r\n            <NestedSelects getvalues={() => {}}>\r\n                <Select  name=\"select1\" label=\"with <MakeVisible>\"> \r\n                    <Option value=\"opt1\">normal option</Option>\r\n                    <Option value=\"opt2\">\r\n                        insert element with MakeVisible\r\n                        <MakeVisible>\r\n                            <MiniListImproved />\r\n                        </MakeVisible>\r\n                    </Option>\r\n                </Select>\r\n            </NestedSelects>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport {\r\n    CustomChangeValue,\r\n    CustomChangeInsert,\r\n    CustomChangeInsertImproved\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ExampleCode from '../../components/commons/ExampleCode/exampleCode';\r\n// text code (code as a string)\r\nimport { customOnChangeExampleCode } from '../exampleInText/allExamplesInText';\r\n// example as a component\r\nimport { CustomChangeValue, CustomChangeInsert, CustomChangeInsertImproved } from './example';\r\n\r\n// text code\r\nconst { \r\n    customChangeValue, \r\n    handlerChangeInsert, \r\n    customChangeInsert ,\r\n    fullyIndependentAsyncComponent\r\n} = customOnChangeExampleCode;\r\n\r\n\r\nfunction CustomOnChange(){\r\n\r\n    return(\r\n        <div className=\"columns is-centered is-multiline\">\r\n            \r\n            <div className=\"column is-10\">\r\n                <div>\r\n                    <h1 className=\"title has-text-centered\">Custom onChange (customchange)</h1>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"column is-10\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"content\">\r\n                            Si necesitas hacer un onchange personalizado lo puedes hacer con el atributo <b>customchange</b>\r\n                            <br/>\r\n                            Éste recibe una función la cual puede tener 2 parámetros: <b>value</b> y <b>insertElement</b>.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"subtitle\"><u>Obtener el valor y hacer algo con él</u></div>\r\n                        <div className=\"content\">\r\n                            <CustomChangeValue />\r\n                            <ExampleCode codeText={customChangeValue} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"column is-10\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"subtitle\"><u>Insertar sub elementos manualmente</u></div>\r\n                        <div className=\"content\">\r\n                            Si bien ya existe un componente llamado <b>{'<MakeVisible>'}</b>, el cual permite hacer visible un sub elemento\r\n                            predefinido dependiendo de la opción seleccionada, también es cierto que a veces queremos hacer ciertas comprobaciones\r\n                            o hacer acciones asíncronas (como traer datos de una API por ejemplo), antes de insertar un nuevo sub elemento.\r\n                            <br/>\r\n                            <br/>\r\n                            Para hacer esto, puedes contar con la ayuda del segundo parámetro <b>insertElement</b>, en realidad puedes llamarlo como quieras\r\n                            porque <b>es un callback.</b>  \r\n                        </div>\r\n                        <div className=\"content\">\r\n                            <div className=\"subtitle\"><u>insertElement(selectName, jsxElement)</u></div>\r\n                            La siguiente función manejadora trae datos de una API e inserta un nuevo sub elemento con dichos datos:\r\n                            <ExampleCode codeText={handlerChangeInsert} /> \r\n                            <div className=\"subtitle\"><u>El ejemplo completo es el siguiente:</u></div>\r\n                            <ExampleCode codeText={customChangeInsert} />\r\n                            Que da como resultado:\r\n                            <CustomChangeInsert />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"column is-10\">\r\n                <div>\r\n                    <h1 className=\"title has-text-centered\">¿La mejor manera de traer datos asíncronamente?</h1>\r\n                    \r\n                    <div className=\"card\">\r\n                        <div className=\"card-content\">\r\n                            <div className=\"content\">\r\n                                Personalmente prefiero que cada sub elemento/componente tenga su propia lógica dentro de su ciclo de vida para traer\r\n                                los datos necesarios para su funcionamiento.\r\n                                <br/>\r\n                                ¿Y la manera de incrustar dicho sub elemento/componente? - simple, con <b>{'<MakeVisible>'}</b>.\r\n                                <br/>\r\n                                Pero como vez, también esta la opción de usar el atributo <b>customChange</b>.\r\n                                <br/>\r\n                                <br/>\r\n                                El ejemplo anterior (en lo personal), se ve mejor de la siguiente manera:\r\n                                <ExampleCode codeText={fullyIndependentAsyncComponent} />\r\n                                <CustomChangeInsertImproved />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"column is-10\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"subtitle\">¿No tienes estilos?</div>\r\n                        <div className=\"content\">\r\n                            nested-selects-react viene sin estilos, para que puedas personalizar tus\r\n                            <b>{' <select></select> '}</b>\r\n                            como quieras, revisa <Link to=\"/styles\">como poner estilos</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomOnChange;","\r\nimport React from 'react';\r\nimport { NestedSelects, Select, Option, MakeVisible } from 'nested-selects-react';\r\n\r\n\r\nfunction StyleExample({ className }) {\r\n\r\n    return(\r\n        <div className={className || ''}>\r\n            <NestedSelects getvalues={() => {}}>\r\n        \r\n                {/* without nested */}\r\n                <Select name=\"mySelect1\" id=\"mySelect1\" label=\"this is mySelect1\">\r\n                    <Option value=\"opt-1\">option text 1</Option>\r\n                    <Option value=\"opt-2\">option text 2</Option>\r\n                </Select>\r\n\r\n                {/* with just one nested <Select> */}\r\n                <Select name=\"mySelect2\" id=\"mySelect2\" label=\"this is mySelect2\">\r\n                    <Option value=\"opt-1\">option text 1</Option>\r\n                    <Option value=\"opt-2\">\r\n                        option 2 trigger\r\n                        <MakeVisible>\r\n                            <Select name=\"mySelect2-nested\" label=\"nested select!\">\r\n                                <Option value=\"opt-1\">opt 1</Option>\r\n                                <Option value=\"opt-2\">opt 2</Option>\r\n                            </Select>\r\n                        </MakeVisible>\r\n                    </Option>\r\n                </Select>\r\n\r\n            </NestedSelects>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    StyleExample\r\n}\r\n","import React from 'react';\r\nimport { StyleExample } from './examplesStyles';\r\nimport ExampleCodeView from '../../components/commons/ExampleCode/exampleCode';\r\nimport { nativeClasses, specificElements } from './cssTextCode';\r\n\r\n\r\nfunction StylesPage() {    \r\n\r\n    return(\r\n        <div className=\"columns direction-column\">\r\n            <div className=\"column has-text-centered\">\r\n                <h1 className=\"title\">Agregando estilos</h1>\r\n            </div>\r\n\r\n\r\n            <div className=\"column card\">\r\n                <div className=\"card-content\">\r\n                    <p className=\"content\">\r\n                        <b>nested-selects-react</b> viene sin estilos por defecto, es asi para que personalices a tu gusto\r\n                        &nbsp;todos los componentes hijos.\r\n                        <br/>\r\n                        <br/>\r\n                        Por defecto cuando uses <b>nested-selects-react</b>, se ve así:\r\n                    </p>\r\n                    <StyleExample className=\"without-style\" />\r\n                </div>\r\n\r\n                <div className=\"card-content\">\r\n                    <p className=\"content\">\r\n                        Y si aplicas estilos, puedes cambiar mucho la cosa:\r\n                        <br/>\r\n                    </p>\r\n                    <StyleExample />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"column card\">\r\n                <div className=\"card-content\">\r\n                    <p className=\"subtitle-v3\">\r\n                        Las clases css que trae <i>nested-selects-react</i> son las siguientes:\r\n                    </p>\r\n                    <ul className=\"class-colors list\">\r\n                        <li className=\"list-item\">\r\n                            .nsr <div className=\"class-color\" style={{backgroundColor: 'darkorchid'}}></div>\r\n                        </li>\r\n                        <li className=\"list-item\">\r\n                            .nsr-principalSelect <div className=\"class-color\" style={{backgroundColor: 'royalblue'}}></div>\r\n                        </li>\r\n                        <li className=\"list-item\">\r\n                            .nsr-select-container <div className=\"class-color\" style={{backgroundColor: 'darkred'}}></div>\r\n                        </li>\r\n                        <li className=\"list-item\">\r\n                            .nsr-label <div className=\"class-color\" style={{backgroundColor: 'white'}}></div>\r\n                        </li>\r\n                        <li className=\"list-item\">\r\n                            .nsr-sub-select <div className=\"class-color\" style={{backgroundColor: 'yellow'}}></div>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <StyleExample className=\"custom-style\" />\r\n                    <ExampleCodeView codeText={nativeClasses} lang=\"css\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"column card\">\r\n                <div className=\"card-content\">\r\n                    <div className=\"content\">\r\n                        También puedes modificar todos los elementos de un tipo. Por ejemplo, si quieres modificar todos los {'<select>'} sería asi:\r\n                    </div>\r\n                    <StyleExample className=\"custom-style selects-styles\" />\r\n                    <ExampleCodeView codeText={specificElements} lang=\"css\" />\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default StylesPage;","import React from 'react';\r\nimport './hamburguer.css';\r\n\r\nfunction Hamburger({handleOpenClose, isOpen}){\r\n    return(\r\n        <div id=\"hamburger\" onClick={handleOpenClose} className={ isOpen ? 'active' : ''}>\r\n            <span></span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hamburger;","import React, { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Hamburguer from '../HamburguerMenu/hamburguer';\r\nimport GitHubButton from 'react-github-btn';\r\n\r\nimport './menu.css';\r\n\r\n\r\nfunction Menu(){\r\n\r\n    let [isOpen, openState] = useState(true);\r\n\r\n    const handleOpenClose = () => openState(!isOpen);\r\n\r\n\r\n    return(\r\n        <div className=\"menu-container\" style={{marginLeft: isOpen ? 0 : -250}}>\r\n            <div className=\"menu-components-wrapper\">\r\n\r\n                <div className=\"close-icon-container\">\r\n                    <Hamburguer {...{isOpen, handleOpenClose}}/>\r\n                </div>\r\n\r\n                <div className=\"ver-en-github\">\r\n                    <GitHubButton \r\n                        href=\"https://github.com/carlosEdua/nested-selects-react\" \r\n                        data-icon=\"octicon-star\" \r\n                        data-size=\"large\" \r\n                        data-show-count=\"true\" \r\n                        aria-label=\"Star carlosEdua/nested-selects-react on GitHub\">\r\n                            Star\r\n                    </GitHubButton>\r\n                </div>\r\n\r\n                <div className=\"list-navlinks-container\">\r\n                    <div className=\"list is-hoverable has-text-centered\">\r\n                        <NavLink exact to=\"/\" className=\"list-item\" activeClassName=\"is-active\">\r\n                            Introducción - Demo\r\n                        </NavLink>\r\n                        <NavLink exact to=\"/get-started\" className=\"list-item\" activeClassName=\"is-active\">\r\n                            Empieza a usarlo\r\n                        </NavLink>\r\n                        <NavLink to=\"/structure\" className=\"list-item\" activeClassName=\"is-active\">\r\n                            Creando la estructura\r\n                        </NavLink>\r\n                        {/* <NavLink to=\"/basic-example\" className=\"list-item\" activeClassName=\"is-active\">\r\n                            Ejemplo básico\r\n                        </NavLink> */}\r\n                        <NavLink to=\"/including-sub-components\" className=\"list-item\" activeClassName=\"is-active\">\r\n                            Incluyendo <br/> sub-componentes\r\n                        </NavLink>\r\n                        <NavLink to=\"/custom-onchange\" className=\"list-item\" activeClassName=\"is-active\">\r\n                            Custom onChange y código asíncrono\r\n                        </NavLink>\r\n                        <NavLink to=\"/styles\" className=\"list-item\" activeClassName=\"is-active\">\r\n                            Estilos\r\n                        </NavLink>\r\n                        {/* <NavLink to=\"/test\" className=\"list-item\" activeClassName=\"is-active\">\r\n                            test\r\n                        </NavLink> */}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport {\r\n    BrowserRouter,\r\n    Route,\r\n    Switch\r\n} from 'react-router-dom';\r\n\r\n// examples code\r\nimport Introduction from '../examplesCode/introduction/intro';\r\nimport GetStarted from '../examplesCode/getStarted/index';\r\nimport MakingStructure from '../examplesCode/makingStructure/index';\r\nimport SubComponents from '../examplesCode/componentsUse/index';\r\nimport CustomOnChange from '../examplesCode/customOnChange/index';\r\nimport Styles from '../examplesCode/stylesUse';\r\nimport TestInside from '../examplesCode/testInside';\r\n\r\nimport { url } from '../url';\r\n// app menu\r\nimport Menu from '../components/Menu/menu';\r\n// style\r\nimport '../globalStyles/bulma.css';\r\nimport './app.css';\r\n\r\n \r\nfunction App(){\r\n    return(\r\n        <div id=\"app-container\">\r\n            <BrowserRouter basename={url}>\r\n\r\n                <Menu />\r\n\r\n                <div id=\"app-content-wrapper\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Introduction}  />\r\n                        <Route exact path=\"/get-started\" component={GetStarted}  />\r\n                        <Route exact path=\"/structure\" component={MakingStructure} />\r\n                        <Route exact path=\"/including-sub-components\" component={SubComponents} />   \r\n                        <Route exact path=\"/styles\" component={Styles}  />\r\n                        <Route exact path=\"/custom-onchange\" component={CustomOnChange}  />\r\n                        {/* <Route exact path=\"/test\" component={TestInside}  /> */}\r\n                    </Switch>\r\n                </div>\r\n\r\n            </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","export const url = 'https://carlosedua.github.io/nested-selects-react';","import React from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport App from './app/app';\r\n\r\nrender(<App/>, document.getElementById('root'));"],"sourceRoot":""}